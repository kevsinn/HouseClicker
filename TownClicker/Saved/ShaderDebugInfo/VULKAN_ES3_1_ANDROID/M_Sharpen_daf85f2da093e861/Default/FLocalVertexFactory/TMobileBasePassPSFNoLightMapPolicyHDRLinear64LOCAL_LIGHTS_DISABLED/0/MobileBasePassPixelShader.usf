#line 1 "DumpShaderDefinesAsCommentedCode"
// #define ALLOW_STATIC_LIGHTING 1

#line 2 "DumpShaderDefinesAsCommentedCode"
// #define ALWAYS_EVALUATE_WORLD_POSITION_OFFSET 0

#line 3 "DumpShaderDefinesAsCommentedCode"
// #define AMPLIFICATIONSHADER 0

#line 4 "DumpShaderDefinesAsCommentedCode"
// #define CLEAR_COAT_BOTTOM_NORMAL 0

#line 5 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DEFINE #define

#line 6 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DXC 1

#line 7 "DumpShaderDefinesAsCommentedCode"
// #define COMPUTESHADER 0

#line 8 "DumpShaderDefinesAsCommentedCode"
// #define DISTORTION_ACCOUNT_FOR_COVERAGE 0

#line 9 "DumpShaderDefinesAsCommentedCode"
// #define DO_CHECK 1

#line 10 "DumpShaderDefinesAsCommentedCode"
// #define DO_GUARD_SLOW 0

#line 11 "DumpShaderDefinesAsCommentedCode"
// #define DUAL_SOURCE_COLOR_BLENDING_ENABLED 0

#line 12 "DumpShaderDefinesAsCommentedCode"
// #define DXT5_NORMALMAPS 0

#line 13 "DumpShaderDefinesAsCommentedCode"
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0

#line 14 "DumpShaderDefinesAsCommentedCode"
// #define ENABLE_AMBIENT_OCCLUSION 0

#line 15 "DumpShaderDefinesAsCommentedCode"
// #define ENABLE_CLUSTERED_LIGHTS 0

#line 16 "DumpShaderDefinesAsCommentedCode"
// #define ENABLE_CLUSTERED_REFLECTION 0

#line 17 "DumpShaderDefinesAsCommentedCode"
// #define ENABLE_SKY_LIGHT 0

#line 18 "DumpShaderDefinesAsCommentedCode"
// #define FORWARD_SHADING 0

#line 19 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0

#line 20 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_VELOCITY 0

#line 21 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_REFACTOR 1

#line 22 "DumpShaderDefinesAsCommentedCode"
// #define GENERATE_SPHERICAL_PARTICLE_NORMALS 0

#line 23 "DumpShaderDefinesAsCommentedCode"
// #define GEOMETRYSHADER 0

#line 24 "DumpShaderDefinesAsCommentedCode"
// #define HAS_INVERTED_Z_BUFFER 1

#line 25 "DumpShaderDefinesAsCommentedCode"
// #define HAS_PRIMITIVE_UNIFORM_BUFFER 1

#line 26 "DumpShaderDefinesAsCommentedCode"
// #define INSTANCED_STEREO 0

#line 27 "DumpShaderDefinesAsCommentedCode"
// #define INTERPOLATE_VERTEX_COLOR 0

#line 28 "DumpShaderDefinesAsCommentedCode"
// #define IRIS_NORMAL 0

#line 29 "DumpShaderDefinesAsCommentedCode"
// #define IS_BASE_PASS 1

#line 30 "DumpShaderDefinesAsCommentedCode"
// #define IS_MATERIAL_SHADER 1

#line 31 "DumpShaderDefinesAsCommentedCode"
// #define IS_MOBILE_BASE_PASS 1

#line 32 "DumpShaderDefinesAsCommentedCode"
// #define IS_MOBILE_DEFERREDSHADING_SUBPASS 0

#line 33 "DumpShaderDefinesAsCommentedCode"
// #define IS_MOBILE_DEPTHREAD_SUBPASS 0

#line 34 "DumpShaderDefinesAsCommentedCode"
// #define LEGACY_MATERIAL_ENERGYCONSERVATION 0

#line 35 "DumpShaderDefinesAsCommentedCode"
// #define LOCAL_LIGHT_DATA_STRIDE 6

#line 36 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ALLOW_NEGATIVE_EMISSIVECOLOR 0

#line 37 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_COMPUTE_FOG_PER_PIXEL 0

#line 38 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_CONTACT_SHADOWS 0

#line 39 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DECAL_READ_MASK 7

#line 40 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DITHER_OPACITY_MASK 0

#line 41 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DOMAIN_POSTPROCESS 1

#line 42 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ENABLE_TRANSLUCENCY_CLOUD_FOGGING 0

#line 43 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ENABLE_TRANSLUCENCY_FOGGING 1

#line 44 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_FORWARD_BLENDS_SKYLIGHT_CUBEMAPS 0

#line 45 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_FULLY_ROUGH 0

#line 46 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_HQ_FORWARD_REFLECTION_CAPTURES 0

#line 47 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_IS_SKY 0

#line 48 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_IS_STRATA 0

#line 49 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ISTHINSURFACE 0

#line 50 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_NONMETAL 1

#line 51 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_NORMAL_CURVATURE_TO_ROUGHNESS 0

#line 52 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_OUTPUT_OPACITY_AS_ALPHA 0

#line 53 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_PATH_TRACING_BUFFER_READ 0

#line 54 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_PLANAR_FORWARD_REFLECTIONS 0

#line 55 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ROUGHDIFFUSE 0

#line 56 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SHADINGMODEL_UNLIT 1

#line 57 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SINGLE_SHADINGMODEL 1

#line 58 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SKY_ATMOSPHERE 0

#line 59 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SSR 0

#line 60 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_TANGENTSPACENORMAL 1

#line 61 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_TWOSIDED 0

#line 62 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_ALPHA_TO_COVERAGE 0

#line 63 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_LM_DIRECTIONALITY 1

#line 64 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_PREINTEGRATED_GF 0

#line 65 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_ANISOTROPY 0

#line 66 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_DECAL_LOOKUP 0

#line 67 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_SCENE_COLOR_COPY 0

#line 68 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_VIRTUALTEXTURE_FEEDBACK 0

#line 69 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALBLENDING_SOLID 1

#line 70 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALDECALRESPONSEMASK 7

#line 71 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALDOMAIN_POSTPROCESS 1

#line 72 "DumpShaderDefinesAsCommentedCode"
// #define MAX_NUM_LIGHTMAP_COEF 2

#line 73 "DumpShaderDefinesAsCommentedCode"
// #define MESHSHADER 0

#line 74 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_DEFERRED_SHADING 0

#line 75 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_HIGH_QUALITY_BRDF 0

#line 76 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_MULTI_VIEW 0

#line 77 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_QL_DISABLE_MATERIAL_NORMAL 0

#line 78 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_QL_FORCE_DISABLE_PREINTEGRATEDGF 0

#line 79 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_QL_FORCE_FULLY_ROUGH 0

#line 80 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_QL_FORCE_NONMETAL 0

#line 81 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_SHADOW_QUALITY 2

#line 82 "DumpShaderDefinesAsCommentedCode"
// #define MULTI_VIEW 0

#line 83 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_INSTANCE_LOCAL_TO_WORLD_PS 0

#line 84 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_INSTANCE_WORLD_TO_LOCAL_PS 0

#line 85 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_COLOR 0

#line 86 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_LOCAL_TO_WORLD 0

#line 87 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_WORLD_TO_LOCAL 0

#line 88 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_SCENE_TEXTURES 1

#line 89 "DumpShaderDefinesAsCommentedCode"
// #define NUM_CULLED_GRID_PRIMITIVE_TYPES 2

#line 90 "DumpShaderDefinesAsCommentedCode"
// #define NUM_CULLED_LIGHTS_GRID_STRIDE 2

#line 91 "DumpShaderDefinesAsCommentedCode"
// #define NUM_VIRTUALTEXTURE_SAMPLES 0

#line 92 "DumpShaderDefinesAsCommentedCode"
// #define OUTPUT_GAMMA_SPACE 0

#line 93 "DumpShaderDefinesAsCommentedCode"
// #define OUTPUT_MOBILE_HDR 1

#line 94 "DumpShaderDefinesAsCommentedCode"
// #define PIXELSHADER 1

#line 95 "DumpShaderDefinesAsCommentedCode"
// #define PIXELSHADEROUTPUT_MRT0 1

#line 96 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ALLOW_SCENE_DATA_COMPRESSED_TRANSFORMS 0

#line 97 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BINDLESS 0

#line 98 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BUFFER_LOAD_TYPE_CONVERSION 1

#line 99 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_CLIP_DISTANCE 0

#line 100 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 0

#line 101 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 0

#line 102 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 0

#line 103 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0

#line 104 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0

#line 105 "DumpShaderDefinesAsCommentedCode"
// #define POST_PROCESS_ALPHA 0

#line 106 "DumpShaderDefinesAsCommentedCode"
// #define PREPASS_LOCAL_LIGHTS_MOBILE 0

#line 107 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0

#line 108 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1

#line 109 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_MOBILE_ENABLE_MOVABLE_SPOTLIGHT_SHADOWS 0

#line 110 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_OIT 0

#line 111 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_STRATA_BACKCOMPATIBILITY 0

#line 112 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1

#line 113 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 1

#line 114 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORTS_LUMEN 1

#line 115 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0

#line 116 "DumpShaderDefinesAsCommentedCode"
// #define QL_FORCEDISABLE_LM_DIRECTIONALITY 0

#line 117 "DumpShaderDefinesAsCommentedCode"
// #define RAY_TRACING_DYNAMIC_MESH_IN_LOCAL_SPACE 1

#line 118 "DumpShaderDefinesAsCommentedCode"
// #define RAYCALLABLESHADER 0

#line 119 "DumpShaderDefinesAsCommentedCode"
// #define RAYGENSHADER 0

#line 120 "DumpShaderDefinesAsCommentedCode"
// #define RAYHITGROUPSHADER 0

#line 121 "DumpShaderDefinesAsCommentedCode"
// #define RAYMISSSHADER 0

#line 122 "DumpShaderDefinesAsCommentedCode"
// #define REFRACTION_ROOT_NODE_OVERRIDES_DEFAULT 0

#line 123 "DumpShaderDefinesAsCommentedCode"
// #define REFRACTION_USE_NONE 1

#line 124 "DumpShaderDefinesAsCommentedCode"
// #define SELECTIVE_BASEPASS_OUTPUTS 0

#line 125 "DumpShaderDefinesAsCommentedCode"
// #define SHADING_PATH_MOBILE 1

#line 126 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ADVANCED_DEBUG_ENABLED 0

#line 127 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ENABLED 0

#line 128 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_OPAQUE_ROUGH_REFRACTION_ENABLED 0

#line 129 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_PREMULTIPLIED_ALPHA_OPACITY_OVERRIDEN 0

#line 130 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0

#line 131 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_SINGLE_LAYER_WATER 0

#line 132 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_GPUSKIN_PASSTHROUGH 0

#line 133 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_RECTLIGHT_ON_FORWARD_LIT_TRANSLUCENT 0

#line 134 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_VSM_FOWARD_QUALITY 0

#line 135 "DumpShaderDefinesAsCommentedCode"
// #define TEXTURE_SAMPLE_DEBUG 0

#line 136 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_SHADOW_WITH_MASKED_OPACITY 0

#line 137 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_WRITING_FRONT_LAYER_TRANSPARENCY 0

#line 138 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_WRITING_VELOCITY 0

#line 139 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f

#line 140 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f

#line 141 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f

#line 142 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f

#line 143 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f

#line 144 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f

#line 145 "DumpShaderDefinesAsCommentedCode"
// #define USE_DBUFFER 0

#line 146 "DumpShaderDefinesAsCommentedCode"
// #define USE_DITHERED_LOD_TRANSITION_FROM_MATERIAL 0

#line 147 "DumpShaderDefinesAsCommentedCode"
// #define USE_SCENE_DEPTH_AUX 1

#line 148 "DumpShaderDefinesAsCommentedCode"
// #define USE_SHADOWMASKTEXTURE 0

#line 149 "DumpShaderDefinesAsCommentedCode"
// #define USES_DISPLACEMENT 0

#line 150 "DumpShaderDefinesAsCommentedCode"
// #define USES_DISTORTION 0

#line 151 "DumpShaderDefinesAsCommentedCode"
// #define USES_EMISSIVE_COLOR 1

#line 152 "DumpShaderDefinesAsCommentedCode"
// #define USES_PER_INSTANCE_CUSTOM_DATA 0

#line 153 "DumpShaderDefinesAsCommentedCode"
// #define USES_PER_INSTANCE_RANDOM 0

#line 154 "DumpShaderDefinesAsCommentedCode"
// #define USES_TRANSFORM_VECTOR 0

#line 155 "DumpShaderDefinesAsCommentedCode"
// #define USES_VERTEX_INTERPOLATOR 0

#line 156 "DumpShaderDefinesAsCommentedCode"
// #define USES_WORLD_POSITION_OFFSET 0

#line 157 "DumpShaderDefinesAsCommentedCode"
// #define VELOCITY_ENCODE_DEPTH 1

#line 158 "DumpShaderDefinesAsCommentedCode"
// #define VERTEXSHADER 0

#line 159 "DumpShaderDefinesAsCommentedCode"
// #define VF_SUPPORTS_PRIMITIVE_SCENE_DATA 0

#line 160 "DumpShaderDefinesAsCommentedCode"
// #define VF_SUPPORTS_SPEEDTREE_WIND 1

#line 161 "DumpShaderDefinesAsCommentedCode"
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0

#line 162 "DumpShaderDefinesAsCommentedCode"
// #define VIRTUAL_TEXTURE_MANUAL_TRILINEAR_FILTERING 1

#line 163 "DumpShaderDefinesAsCommentedCode"
// #define WANT_PIXEL_DEPTH_OFFSET 0

#line 164 "DumpShaderDefinesAsCommentedCode"
// #define WORKING_COLOR_SPACE_IS_SRGB 1

#line 63 "/Engine/Public/Platform/Vulkan/VulkanCommon.ush"
#define VULKAN_WAVESIZE(N)

#line 45 "/Engine/Private/Common.ush"
struct FloatDeriv2
{
	float2 Value;
	float2 Ddx;
	float2 Ddy;
};

#line 116 "/Engine/Private/Common.ush"
const static min16float PI = 3.1415926535897932f;

#line 5 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCScalar
{
	float Tile;
	float Offset;
};

#line 11 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};

#line 17 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};

#line 23 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};

#line 58 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
};

#line 65 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
	int Dummy; 
};

#line 103 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 111 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 119 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 127 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 135 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

#line 140 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}

#line 161 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	return Result;
}

#line 177 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 3 "/Engine/Generated/UniformBuffers/View.ush"
cbuffer   View 
{
	 float4x4  View_TranslatedWorldToClip;
	 float4x4  View_RelativeWorldToClip;
	 float4x4  View_ClipToRelativeWorld;
	 float4x4  View_TranslatedWorldToView;
	 float4x4  View_ViewToTranslatedWorld;
	 float4x4  View_TranslatedWorldToCameraView;
	 float4x4  View_CameraViewToTranslatedWorld;
	 float4x4  View_ViewToClip;
	 float4x4  View_ViewToClipNoAA;
	 float4x4  View_ClipToView;
	 float4x4  View_ClipToTranslatedWorld;
	 float4x4  View_SVPositionToTranslatedWorld;
	 float4x4  View_ScreenToRelativeWorld;
	 float4x4  View_ScreenToTranslatedWorld;
	 float4x4  View_MobileMultiviewShadowTransform;
	 float3  View_ViewTilePosition;
	 float  PrePadding_View_972;
	 float3  View_MatrixTilePosition;
	 float  PrePadding_View_988;
	 min16float3  View_ViewForward;
	 min16float  PrePadding_View_1004;
	 min16float3  View_ViewUp;
	 min16float  PrePadding_View_1020;
	 min16float3  View_ViewRight;
	 min16float  PrePadding_View_1036;
	 min16float3  View_HMDViewNoRollUp;
	 min16float  PrePadding_View_1052;
	 min16float3  View_HMDViewNoRollRight;
	 min16float  PrePadding_View_1068;
	 float4  View_InvDeviceZToWorldZTransform;
	 min16float4  View_ScreenPositionScaleBias;
	 float3  View_RelativeWorldCameraOrigin;
	 float  PrePadding_View_1116;
	 float3  View_TranslatedWorldCameraOrigin;
	 float  PrePadding_View_1132;
	 float3  View_RelativeWorldViewOrigin;
	 float  PrePadding_View_1148;
	 float3  View_RelativePreViewTranslation;
	 float  PrePadding_View_1164;
	 float4x4  View_PrevViewToClip;
	 float4x4  View_PrevClipToView;
	 float4x4  View_PrevTranslatedWorldToClip;
	 float4x4  View_PrevTranslatedWorldToView;
	 float4x4  View_PrevViewToTranslatedWorld;
	 float4x4  View_PrevTranslatedWorldToCameraView;
	 float4x4  View_PrevCameraViewToTranslatedWorld;
	 float3  View_PrevTranslatedWorldCameraOrigin;
	 float  PrePadding_View_1628;
	 float3  View_PrevRelativeWorldCameraOrigin;
	 float  PrePadding_View_1644;
	 float3  View_PrevRelativeWorldViewOrigin;
	 float  PrePadding_View_1660;
	 float3  View_RelativePrevPreViewTranslation;
	 float  PrePadding_View_1676;
	 float4x4  View_PrevClipToRelativeWorld;
	 float4x4  View_PrevScreenToTranslatedWorld;
	 float4x4  View_ClipToPrevClip;
	 float4x4  View_ClipToPrevClipWithAA;
	 float4  View_TemporalAAJitter;
	 float4  View_GlobalClippingPlane;
	 float2  View_FieldOfViewWideAngles;
	 float2  View_PrevFieldOfViewWideAngles;
	 min16float4  View_ViewRectMin;
	 float4  View_ViewSizeAndInvSize;
	 uint4  View_ViewRectMinAndSize;
	 float4  View_LightProbeSizeRatioAndInvSizeRatio;
	 float4  View_BufferSizeAndInvSize;
	 float4  View_BufferBilinearUVMinMax;
	 float4  View_ScreenToViewSpace;
	 float2  View_BufferToSceneTextureScale;
	 float2  View_ResolutionFractionAndInv;
	 int  View_NumSceneColorMSAASamples;
	 float  View_ProjectionDepthThicknessScale;
	 float  View_PreExposure;
	 float  View_OneOverPreExposure;
	 min16float4  View_DiffuseOverrideParameter;
	 min16float4  View_SpecularOverrideParameter;
	 min16float4  View_NormalOverrideParameter;
	 min16float2  View_RoughnessOverrideParameter;
	 float  View_PrevFrameGameTime;
	 float  View_PrevFrameRealTime;
	 min16float  View_OutOfBoundsMask;
	 min16float  PrePadding_View_2196;
	 min16float  PrePadding_View_2200;
	 min16float  PrePadding_View_2204;
	 float3  View_WorldCameraMovementSinceLastFrame;
	 float  View_CullingSign;
	 min16float  View_NearPlane;
	 float  View_GameTime;
	 float  View_RealTime;
	 float  View_DeltaTime;
	 float  View_MaterialTextureMipBias;
	 float  View_MaterialTextureDerivativeMultiply;
	 uint  View_Random;
	 uint  View_FrameNumber;
	 uint  View_FrameCounter;
	 uint  View_StateFrameIndexMod8;
	 uint  View_StateFrameIndex;
	 uint  View_DebugViewModeMask;
	 uint  View_WorldIsPaused;
	 min16float  View_CameraCut;
	 min16float  View_UnlitViewmodeMask;
	 min16float  PrePadding_View_2284;
	 min16float4  View_DirectionalLightColor;
	 min16float3  View_DirectionalLightDirection;
	 min16float  PrePadding_View_2316;
	 float4  View_TranslucencyLightingVolumeMin[2];
	 float4  View_TranslucencyLightingVolumeInvSize[2];
	 float4  View_TemporalAAParams;
	 float4  View_CircleDOFParams;
	 float  View_DepthOfFieldSensorWidth;
	 float  View_DepthOfFieldFocalDistance;
	 float  View_DepthOfFieldScale;
	 float  View_DepthOfFieldFocalLength;
	 float  View_DepthOfFieldFocalRegion;
	 float  View_DepthOfFieldNearTransitionRegion;
	 float  View_DepthOfFieldFarTransitionRegion;
	 float  View_MotionBlurNormalizedToPixel;
	 float  View_GeneralPurposeTweak;
	 float  View_GeneralPurposeTweak2;
	 min16float  View_DemosaicVposOffset;
	 float  View_DecalDepthBias;
	 float3  View_IndirectLightingColorScale;
	 float  PrePadding_View_2476;
	 float3  View_PrecomputedIndirectLightingColorScale;
	 float  PrePadding_View_2492;
	 float3  View_PrecomputedIndirectSpecularColorScale;
	 float  PrePadding_View_2508;
	 float4  View_AtmosphereLightDirection[2];
	 float4  View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  View_AtmosphereLightIlluminanceOuterSpace[2];
	 float4  View_AtmosphereLightDiscLuminance[2];
	 float4  View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  View_SkyViewLutSizeAndInvSize;
	 float3  View_SkyCameraTranslatedWorldOrigin;
	 float  PrePadding_View_2700;
	 float4  View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  View_SkyViewLutReferential;
	 float4  View_SkyAtmosphereSkyLuminanceFactor;
	 float  View_SkyAtmospherePresentInScene;
	 float  View_SkyAtmosphereHeightFogContribution;
	 float  View_SkyAtmosphereBottomRadiusKm;
	 float  View_SkyAtmosphereTopRadiusKm;
	 float4  View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float  PrePadding_View_2856;
	 float  PrePadding_View_2860;
	 float3  View_NormalCurvatureToRoughnessScaleBias;
	 float  View_RenderingReflectionCaptureMask;
	 float  View_RealTimeReflectionCapture;
	 float  View_RealTimeReflectionCapturePreExposure;
	 float  PrePadding_View_2888;
	 float  PrePadding_View_2892;
	 float4  View_AmbientCubemapTint;
	 float  View_AmbientCubemapIntensity;
	 float  View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  View_SkyLightAffectReflectionFlag;
	 float  View_SkyLightAffectGlobalIlluminationFlag;
	 float4  View_SkyLightColor;
	 float4  View_MobileSkyIrradianceEnvironmentMap[8];
	 float  View_MobilePreviewMode;
	 float  View_HMDEyePaddingOffset;
	 min16float  View_ReflectionCubemapMaxMip;
	 float  View_ShowDecalsMask;
	 uint  View_DistanceFieldAOSpecularOcclusionMode;
	 float  View_IndirectCapsuleSelfShadowingIntensity;
	 float  PrePadding_View_3096;
	 float  PrePadding_View_3100;
	 float3  View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  View_StereoPassIndex;
	 float4  View_GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  View_GlobalDistanceFieldMipFactor;
	 float  View_GlobalDistanceFieldMipTransition;
	 int  View_GlobalDistanceFieldClipmapSizeInPages;
	 int  PrePadding_View_3516;
	 float3  View_GlobalDistanceFieldInvPageAtlasSize;
	 float  PrePadding_View_3532;
	 float3  View_GlobalDistanceFieldInvCoverageAtlasSize;
	 float  View_GlobalVolumeDimension;
	 float  View_GlobalVolumeTexelSize;
	 float  View_MaxGlobalDFAOConeDistance;
	 uint  View_NumGlobalSDFClipmaps;
	 float  View_CoveredExpandSurfaceScale;
	 float  View_NotCoveredExpandSurfaceScale;
	 float  View_NotCoveredMinStepScale;
	 float  View_DitheredTransparencyStepThreshold;
	 float  View_DitheredTransparencyTraceThreshold;
	 int2  View_CursorPosition;
	 float  View_bCheckerboardSubsurfaceProfileRendering;
	 float  PrePadding_View_3596;
	 float3  View_VolumetricFogInvGridSize;
	 float  PrePadding_View_3612;
	 float3  View_VolumetricFogGridZParams;
	 float  PrePadding_View_3628;
	 float2  View_VolumetricFogSVPosToVolumeUV;
	 float2  View_VolumetricFogViewGridUVToPrevViewRectUV;
	 float2  View_VolumetricFogPrevViewGridRectUVToResourceUV;
	 float2  View_VolumetricFogPrevUVMax;
	 float2  View_VolumetricFogScreenToResourceUV;
	 float2  View_VolumetricFogUVMax;
	 float  View_VolumetricFogMaxDistance;
	 float  PrePadding_View_3684;
	 float  PrePadding_View_3688;
	 float  PrePadding_View_3692;
	 float3  View_VolumetricLightmapWorldToUVScale;
	 float  PrePadding_View_3708;
	 float3  View_VolumetricLightmapWorldToUVAdd;
	 float  PrePadding_View_3724;
	 float3  View_VolumetricLightmapIndirectionTextureSize;
	 float  View_VolumetricLightmapBrickSize;
	 float3  View_VolumetricLightmapBrickTexelSize;
	 float  View_IndirectLightingCacheShowFlag;
	 float  View_EyeToPixelSpreadAngle;
	 float  PrePadding_View_3764;
	 float  PrePadding_View_3768;
	 float  PrePadding_View_3772;
	 float4  View_XRPassthroughCameraUVs[2];
	 float  View_GlobalVirtualTextureMipBias;
	 uint  View_VirtualTextureFeedbackShift;
	 uint  View_VirtualTextureFeedbackMask;
	 uint  View_VirtualTextureFeedbackStride;
	 uint  View_VirtualTextureFeedbackJitterOffset;
	 uint  View_VirtualTextureFeedbackSampleOffset;
	 uint  PrePadding_View_3832;
	 uint  PrePadding_View_3836;
	 float4  View_RuntimeVirtualTextureMipLevel;
	 float2  View_RuntimeVirtualTexturePackHeight;
	 float  PrePadding_View_3864;
	 float  PrePadding_View_3868;
	 float4  View_RuntimeVirtualTextureDebugParams;
	 float  View_OverrideLandscapeLOD;
	 int  View_FarShadowStaticMeshLODBias;
	 float  View_MinRoughness;
	 float  PrePadding_View_3900;
	 float4  View_HairRenderInfo;
	 uint  View_EnableSkyLight;
	 uint  View_HairRenderInfoBits;
	 uint  View_HairComponents;
	 float  View_bSubsurfacePostprocessEnabled;
	 float4  View_SSProfilesTextureSizeAndInvSize;
	 float4  View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float4  View_SpecularProfileTextureSizeAndInvSize;
	 float3  View_PhysicsFieldClipmapCenter;
	 float  View_PhysicsFieldClipmapDistance;
	 int  View_PhysicsFieldClipmapResolution;
	 int  View_PhysicsFieldClipmapExponent;
	 int  View_PhysicsFieldClipmapCount;
	 int  View_PhysicsFieldTargetCount;
	 int4  View_PhysicsFieldTargets[32];
	 uint  View_GPUSceneViewId;
	 float  View_ViewResolutionFraction;
	 float  View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 float  PrePadding_View_4540;
	 float4  View_TanAndInvTanHalfFOV;
	 float4  View_PrevTanAndInvTanHalfFOV;
	 float4  View_GlintLUTParameters0;
	 float4  View_GlintLUTParameters1;
	 uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	 uint  PrePadding_View_4612;
	 uint BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	 uint  PrePadding_View_4620;
	 uint BindlessResource_View_VolumetricLightmapIndirectionTexture ;
	 uint  PrePadding_View_4628;
	 uint BindlessResource_View_VolumetricLightmapBrickAmbientVector ;
	 uint  PrePadding_View_4636;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0 ;
	 uint  PrePadding_View_4644;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1 ;
	 uint  PrePadding_View_4652;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2 ;
	 uint  PrePadding_View_4660;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3 ;
	 uint  PrePadding_View_4668;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4 ;
	 uint  PrePadding_View_4676;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5 ;
	 uint  PrePadding_View_4684;
	 uint BindlessResource_View_SkyBentNormalBrickTexture ;
	 uint  PrePadding_View_4692;
	 uint BindlessResource_View_DirectionalLightShadowingBrickTexture ;
	 uint  PrePadding_View_4700;
	 uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint  PrePadding_View_4708;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	 uint  PrePadding_View_4716;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	 uint  PrePadding_View_4724;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	 uint  PrePadding_View_4732;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	 uint  PrePadding_View_4740;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	 uint  PrePadding_View_4748;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	 uint  PrePadding_View_4756;
	 uint BindlessSampler_View_SkyBentNormalTextureSampler ;
	 uint  PrePadding_View_4764;
	 uint BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	 uint  PrePadding_View_4772;
	 uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture ;
	 uint  PrePadding_View_4780;
	 uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint  PrePadding_View_4788;
	 uint BindlessResource_View_GlobalDistanceFieldPageTableTexture ;
	 uint  PrePadding_View_4796;
	 uint BindlessResource_View_GlobalDistanceFieldMipTexture ;
	 uint  PrePadding_View_4804;
	 uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint  PrePadding_View_4812;
	 uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint  PrePadding_View_4820;
	 uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler ;
	 uint  PrePadding_View_4828;
	 uint BindlessResource_View_AtmosphereTransmittanceTexture ;
	 uint  PrePadding_View_4836;
	 uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	 uint  PrePadding_View_4844;
	 uint BindlessResource_View_AtmosphereIrradianceTexture ;
	 uint  PrePadding_View_4852;
	 uint BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	 uint  PrePadding_View_4860;
	 uint BindlessResource_View_AtmosphereInscatterTexture ;
	 uint  PrePadding_View_4868;
	 uint BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	 uint  PrePadding_View_4876;
	 uint BindlessResource_View_PerlinNoiseGradientTexture ;
	 uint  PrePadding_View_4884;
	 uint BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	 uint  PrePadding_View_4892;
	 uint BindlessResource_View_PerlinNoise3DTexture ;
	 uint  PrePadding_View_4900;
	 uint BindlessSampler_View_PerlinNoise3DTextureSampler ;
	 uint  PrePadding_View_4908;
	 uint BindlessResource_View_SobolSamplingTexture ;
	 uint  PrePadding_View_4916;
	 uint BindlessSampler_View_SharedPointWrappedSampler ;
	 uint  PrePadding_View_4924;
	 uint BindlessSampler_View_SharedPointClampedSampler ;
	 uint  PrePadding_View_4932;
	 uint BindlessSampler_View_SharedBilinearWrappedSampler ;
	 uint  PrePadding_View_4940;
	 uint BindlessSampler_View_SharedBilinearClampedSampler ;
	 uint  PrePadding_View_4948;
	 uint BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	 uint  PrePadding_View_4956;
	 uint BindlessSampler_View_SharedTrilinearWrappedSampler ;
	 uint  PrePadding_View_4964;
	 uint BindlessSampler_View_SharedTrilinearClampedSampler ;
	 uint  PrePadding_View_4972;
	 uint BindlessResource_View_PreIntegratedBRDF ;
	 uint  PrePadding_View_4980;
	 uint BindlessSampler_View_PreIntegratedBRDFSampler ;
	 uint  PrePadding_View_4988;
	 uint BindlessResource_View_SkyIrradianceEnvironmentMap ;
	 uint  PrePadding_View_4996;
	 uint BindlessResource_View_TransmittanceLutTexture ;
	 uint  PrePadding_View_5004;
	 uint BindlessSampler_View_TransmittanceLutTextureSampler ;
	 uint  PrePadding_View_5012;
	 uint BindlessResource_View_SkyViewLutTexture ;
	 uint  PrePadding_View_5020;
	 uint BindlessSampler_View_SkyViewLutTextureSampler ;
	 uint  PrePadding_View_5028;
	 uint BindlessResource_View_DistantSkyLightLutTexture ;
	 uint  PrePadding_View_5036;
	 uint BindlessSampler_View_DistantSkyLightLutTextureSampler ;
	 uint  PrePadding_View_5044;
	 uint BindlessResource_View_CameraAerialPerspectiveVolume ;
	 uint  PrePadding_View_5052;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	 uint  PrePadding_View_5060;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly ;
	 uint  PrePadding_View_5068;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint  PrePadding_View_5076;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly ;
	 uint  PrePadding_View_5084;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint  PrePadding_View_5092;
	 uint BindlessResource_View_HairScatteringLUTTexture ;
	 uint  PrePadding_View_5100;
	 uint BindlessSampler_View_HairScatteringLUTSampler ;
	 uint  PrePadding_View_5108;
	 uint BindlessResource_View_GGXLTCMatTexture ;
	 uint  PrePadding_View_5116;
	 uint BindlessSampler_View_GGXLTCMatSampler ;
	 uint  PrePadding_View_5124;
	 uint BindlessResource_View_GGXLTCAmpTexture ;
	 uint  PrePadding_View_5132;
	 uint BindlessSampler_View_GGXLTCAmpSampler ;
	 uint  PrePadding_View_5140;
	 uint BindlessResource_View_SheenLTCTexture ;
	 uint  PrePadding_View_5148;
	 uint BindlessSampler_View_SheenLTCSampler ;
	 uint  PrePadding_View_5156;
	 uint  View_bShadingEnergyConservation;
	 uint  View_bShadingEnergyPreservation;
	 uint BindlessResource_View_ShadingEnergyGGXSpecTexture ;
	 uint  PrePadding_View_5172;
	 uint BindlessResource_View_ShadingEnergyGGXGlassTexture ;
	 uint  PrePadding_View_5180;
	 uint BindlessResource_View_ShadingEnergyClothSpecTexture ;
	 uint  PrePadding_View_5188;
	 uint BindlessResource_View_ShadingEnergyDiffuseTexture ;
	 uint  PrePadding_View_5196;
	 uint BindlessSampler_View_ShadingEnergySampler ;
	 uint  PrePadding_View_5204;
	 uint BindlessResource_View_GlintTexture ;
	 uint  PrePadding_View_5212;
	 uint BindlessSampler_View_GlintSampler ;
	 uint  PrePadding_View_5220;
	 uint BindlessResource_View_SimpleVolumeTexture ;
	 uint  PrePadding_View_5228;
	 uint BindlessSampler_View_SimpleVolumeTextureSampler ;
	 uint  PrePadding_View_5236;
	 uint BindlessResource_View_SimpleVolumeEnvTexture ;
	 uint  PrePadding_View_5244;
	 uint BindlessSampler_View_SimpleVolumeEnvTextureSampler ;
	 uint  PrePadding_View_5252;
	 uint BindlessResource_View_SSProfilesTexture ;
	 uint  PrePadding_View_5260;
	 uint BindlessSampler_View_SSProfilesSampler ;
	 uint  PrePadding_View_5268;
	 uint BindlessSampler_View_SSProfilesTransmissionSampler ;
	 uint  PrePadding_View_5276;
	 uint BindlessResource_View_SSProfilesPreIntegratedTexture ;
	 uint  PrePadding_View_5284;
	 uint BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	 uint  PrePadding_View_5292;
	 uint BindlessResource_View_SpecularProfileTexture ;
	 uint  PrePadding_View_5300;
	 uint BindlessSampler_View_SpecularProfileSampler ;
	 uint  PrePadding_View_5308;
	 uint BindlessResource_View_WaterIndirection ;
	 uint  PrePadding_View_5316;
	 uint BindlessResource_View_WaterData ;
	 uint  PrePadding_View_5324;
	 float4  View_RectLightAtlasSizeAndInvSize;
	 float  View_RectLightAtlasMaxMipLevel;
	 float  PrePadding_View_5348;
	 uint BindlessResource_View_RectLightAtlasTexture ;
	 uint  PrePadding_View_5356;
	 uint BindlessSampler_View_RectLightAtlasSampler ;
	 uint  PrePadding_View_5364;
	 uint  PrePadding_View_5368;
	 uint  PrePadding_View_5372;
	 float4  View_IESAtlasSizeAndInvSize;
	 uint BindlessResource_View_IESAtlasTexture ;
	 uint  PrePadding_View_5396;
	 uint BindlessSampler_View_IESAtlasSampler ;
	 uint  PrePadding_View_5404;
	 uint BindlessSampler_View_LandscapeWeightmapSampler ;
	 uint  PrePadding_View_5412;
	 uint BindlessResource_View_LandscapeIndirection ;
	 uint  PrePadding_View_5420;
	 uint BindlessResource_View_LandscapePerComponentData ;
	 uint  PrePadding_View_5428;
	 uint BindlessResource_View_VTFeedbackBuffer ;
	 uint  PrePadding_View_5436;
	 uint BindlessResource_View_PhysicsFieldClipmapBuffer ;
	 uint  PrePadding_View_5444;
	 uint  PrePadding_View_5448;
	 uint  PrePadding_View_5452;
	 float3  View_TLASRelativePreViewTranslation;
	 float  PrePadding_View_5468;
	 float3  View_TLASViewTilePosition;
}

#line 3 "/Engine/Generated/UniformBuffers/InstancedView.ush"
cbuffer   InstancedView 
{
	 float4x4  InstancedView_TranslatedWorldToClip[2];
	 float4x4  InstancedView_RelativeWorldToClip[2];
	 float4x4  InstancedView_ClipToRelativeWorld[2];
	 float4x4  InstancedView_TranslatedWorldToView[2];
	 float4x4  InstancedView_ViewToTranslatedWorld[2];
	 float4x4  InstancedView_TranslatedWorldToCameraView[2];
	 float4x4  InstancedView_CameraViewToTranslatedWorld[2];
	 float4x4  InstancedView_ViewToClip[2];
	 float4x4  InstancedView_ViewToClipNoAA[2];
	 float4x4  InstancedView_ClipToView[2];
	 float4x4  InstancedView_ClipToTranslatedWorld[2];
	 float4x4  InstancedView_SVPositionToTranslatedWorld[2];
	 float4x4  InstancedView_ScreenToRelativeWorld[2];
	 float4x4  InstancedView_ScreenToTranslatedWorld[2];
	 float4x4  InstancedView_MobileMultiviewShadowTransform[2];
	 float3  InstancedView_ViewTilePosition;
	 float  PrePadding_InstancedView_1932;
	 float3  InstancedView_MatrixTilePosition;
	 float  PrePadding_InstancedView_1948;
	 min16float3  InstancedView_ViewForward;
	 min16float  PrePadding_InstancedView_1964;
	 min16float3  InstancedView_ViewUp;
	 min16float  PrePadding_InstancedView_1980;
	 min16float3  InstancedView_ViewRight;
	 min16float  PrePadding_InstancedView_1996;
	 min16float4  InstancedView_HMDViewNoRollUp[2];
	 min16float4  InstancedView_HMDViewNoRollRight[2];
	 float4  InstancedView_InvDeviceZToWorldZTransform[2];
	 min16float4  InstancedView_ScreenPositionScaleBias[2];
	 float4  InstancedView_RelativeWorldCameraOrigin[2];
	 float4  InstancedView_TranslatedWorldCameraOrigin[2];
	 float4  InstancedView_RelativeWorldViewOrigin[2];
	 float4  InstancedView_RelativePreViewTranslation[2];
	 float4x4  InstancedView_PrevViewToClip[2];
	 float4x4  InstancedView_PrevClipToView[2];
	 float4x4  InstancedView_PrevTranslatedWorldToClip[2];
	 float4x4  InstancedView_PrevTranslatedWorldToView[2];
	 float4x4  InstancedView_PrevViewToTranslatedWorld[2];
	 float4x4  InstancedView_PrevTranslatedWorldToCameraView[2];
	 float4x4  InstancedView_PrevCameraViewToTranslatedWorld[2];
	 float4  InstancedView_PrevTranslatedWorldCameraOrigin[2];
	 float4  InstancedView_PrevRelativeWorldCameraOrigin[2];
	 float4  InstancedView_PrevRelativeWorldViewOrigin[2];
	 float4  InstancedView_RelativePrevPreViewTranslation[2];
	 float4x4  InstancedView_PrevClipToRelativeWorld[2];
	 float4x4  InstancedView_PrevScreenToTranslatedWorld[2];
	 float4x4  InstancedView_ClipToPrevClip[2];
	 float4x4  InstancedView_ClipToPrevClipWithAA[2];
	 float4  InstancedView_TemporalAAJitter[2];
	 float4  InstancedView_GlobalClippingPlane[2];
	 float4  InstancedView_FieldOfViewWideAngles[2];
	 float4  InstancedView_PrevFieldOfViewWideAngles[2];
	 min16float4  InstancedView_ViewRectMin[2];
	 float4  InstancedView_ViewSizeAndInvSize;
	 uint4  InstancedView_ViewRectMinAndSize;
	 float4  InstancedView_LightProbeSizeRatioAndInvSizeRatio;
	 float4  InstancedView_BufferSizeAndInvSize;
	 float4  InstancedView_BufferBilinearUVMinMax[2];
	 float4  InstancedView_ScreenToViewSpace[2];
	 float4  InstancedView_BufferToSceneTextureScale[2];
	 float2  InstancedView_ResolutionFractionAndInv;
	 int  InstancedView_NumSceneColorMSAASamples;
	 int  PrePadding_InstancedView_4124;
	 float4  InstancedView_ProjectionDepthThicknessScale[2];
	 float  InstancedView_PreExposure;
	 float  InstancedView_OneOverPreExposure;
	 float  PrePadding_InstancedView_4168;
	 float  PrePadding_InstancedView_4172;
	 min16float4  InstancedView_DiffuseOverrideParameter;
	 min16float4  InstancedView_SpecularOverrideParameter;
	 min16float4  InstancedView_NormalOverrideParameter;
	 min16float2  InstancedView_RoughnessOverrideParameter;
	 float  InstancedView_PrevFrameGameTime;
	 float  InstancedView_PrevFrameRealTime;
	 min16float  InstancedView_OutOfBoundsMask;
	 min16float  PrePadding_InstancedView_4244;
	 min16float  PrePadding_InstancedView_4248;
	 min16float  PrePadding_InstancedView_4252;
	 float4  InstancedView_WorldCameraMovementSinceLastFrame[2];
	 float  InstancedView_CullingSign;
	 float  PrePadding_InstancedView_4292;
	 float  PrePadding_InstancedView_4296;
	 float  PrePadding_InstancedView_4300;
	 min16float4  InstancedView_NearPlane[2];
	 float  InstancedView_GameTime;
	 float  InstancedView_RealTime;
	 float  InstancedView_DeltaTime;
	 float  InstancedView_MaterialTextureMipBias;
	 float  InstancedView_MaterialTextureDerivativeMultiply;
	 uint  InstancedView_Random;
	 uint  InstancedView_FrameNumber;
	 uint  InstancedView_FrameCounter;
	 uint  InstancedView_StateFrameIndexMod8;
	 uint  InstancedView_StateFrameIndex;
	 uint  InstancedView_DebugViewModeMask;
	 uint  InstancedView_WorldIsPaused;
	 min16float  InstancedView_CameraCut;
	 min16float  InstancedView_UnlitViewmodeMask;
	 min16float  PrePadding_InstancedView_4392;
	 min16float  PrePadding_InstancedView_4396;
	 min16float4  InstancedView_DirectionalLightColor;
	 min16float3  InstancedView_DirectionalLightDirection;
	 min16float  PrePadding_InstancedView_4428;
	 float4  InstancedView_TranslucencyLightingVolumeMin[2];
	 float4  InstancedView_TranslucencyLightingVolumeInvSize[2];
	 float4  InstancedView_TemporalAAParams;
	 float4  InstancedView_CircleDOFParams;
	 float  InstancedView_DepthOfFieldSensorWidth;
	 float  InstancedView_DepthOfFieldFocalDistance;
	 float  InstancedView_DepthOfFieldScale;
	 float  InstancedView_DepthOfFieldFocalLength;
	 float  InstancedView_DepthOfFieldFocalRegion;
	 float  InstancedView_DepthOfFieldNearTransitionRegion;
	 float  InstancedView_DepthOfFieldFarTransitionRegion;
	 float  InstancedView_MotionBlurNormalizedToPixel;
	 float  InstancedView_GeneralPurposeTweak;
	 float  InstancedView_GeneralPurposeTweak2;
	 min16float  InstancedView_DemosaicVposOffset;
	 float  InstancedView_DecalDepthBias;
	 float3  InstancedView_IndirectLightingColorScale;
	 float  PrePadding_InstancedView_4588;
	 float3  InstancedView_PrecomputedIndirectLightingColorScale;
	 float  PrePadding_InstancedView_4604;
	 float3  InstancedView_PrecomputedIndirectSpecularColorScale;
	 float  PrePadding_InstancedView_4620;
	 float4  InstancedView_AtmosphereLightDirection[2];
	 float4  InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  InstancedView_AtmosphereLightIlluminanceOuterSpace[2];
	 float4  InstancedView_AtmosphereLightDiscLuminance[2];
	 float4  InstancedView_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  InstancedView_SkyViewLutSizeAndInvSize;
	 float3  InstancedView_SkyCameraTranslatedWorldOrigin;
	 float  PrePadding_InstancedView_4812;
	 float4  InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  InstancedView_SkyViewLutReferential;
	 float4  InstancedView_SkyAtmosphereSkyLuminanceFactor;
	 float  InstancedView_SkyAtmospherePresentInScene;
	 float  InstancedView_SkyAtmosphereHeightFogContribution;
	 float  InstancedView_SkyAtmosphereBottomRadiusKm;
	 float  InstancedView_SkyAtmosphereTopRadiusKm;
	 float4  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float  PrePadding_InstancedView_4968;
	 float  PrePadding_InstancedView_4972;
	 float3  InstancedView_NormalCurvatureToRoughnessScaleBias;
	 float  InstancedView_RenderingReflectionCaptureMask;
	 float  InstancedView_RealTimeReflectionCapture;
	 float  InstancedView_RealTimeReflectionCapturePreExposure;
	 float  PrePadding_InstancedView_5000;
	 float  PrePadding_InstancedView_5004;
	 float4  InstancedView_AmbientCubemapTint;
	 float  InstancedView_AmbientCubemapIntensity;
	 float  InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  InstancedView_SkyLightAffectReflectionFlag;
	 float  InstancedView_SkyLightAffectGlobalIlluminationFlag;
	 float4  InstancedView_SkyLightColor;
	 float4  InstancedView_MobileSkyIrradianceEnvironmentMap[8];
	 float  InstancedView_MobilePreviewMode;
	 float  PrePadding_InstancedView_5188;
	 float  PrePadding_InstancedView_5192;
	 float  PrePadding_InstancedView_5196;
	 float4  InstancedView_HMDEyePaddingOffset[2];
	 min16float  InstancedView_ReflectionCubemapMaxMip;
	 float  InstancedView_ShowDecalsMask;
	 uint  InstancedView_DistanceFieldAOSpecularOcclusionMode;
	 float  InstancedView_IndirectCapsuleSelfShadowingIntensity;
	 float3  InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 float  PrePadding_InstancedView_5260;
	 int4  InstancedView_StereoPassIndex[2];
	 float4  InstancedView_GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  InstancedView_GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  InstancedView_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  InstancedView_GlobalDistanceFieldMipFactor;
	 float  InstancedView_GlobalDistanceFieldMipTransition;
	 int  InstancedView_GlobalDistanceFieldClipmapSizeInPages;
	 int  PrePadding_InstancedView_5692;
	 float3  InstancedView_GlobalDistanceFieldInvPageAtlasSize;
	 float  PrePadding_InstancedView_5708;
	 float3  InstancedView_GlobalDistanceFieldInvCoverageAtlasSize;
	 float  InstancedView_GlobalVolumeDimension;
	 float  InstancedView_GlobalVolumeTexelSize;
	 float  InstancedView_MaxGlobalDFAOConeDistance;
	 uint  InstancedView_NumGlobalSDFClipmaps;
	 float  InstancedView_CoveredExpandSurfaceScale;
	 float  InstancedView_NotCoveredExpandSurfaceScale;
	 float  InstancedView_NotCoveredMinStepScale;
	 float  InstancedView_DitheredTransparencyStepThreshold;
	 float  InstancedView_DitheredTransparencyTraceThreshold;
	 int2  InstancedView_CursorPosition;
	 float  InstancedView_bCheckerboardSubsurfaceProfileRendering;
	 float  PrePadding_InstancedView_5772;
	 float3  InstancedView_VolumetricFogInvGridSize;
	 float  PrePadding_InstancedView_5788;
	 float3  InstancedView_VolumetricFogGridZParams;
	 float  PrePadding_InstancedView_5804;
	 float2  InstancedView_VolumetricFogSVPosToVolumeUV;
	 float2  InstancedView_VolumetricFogViewGridUVToPrevViewRectUV;
	 float2  InstancedView_VolumetricFogPrevViewGridRectUVToResourceUV;
	 float2  InstancedView_VolumetricFogPrevUVMax;
	 float2  InstancedView_VolumetricFogScreenToResourceUV;
	 float2  InstancedView_VolumetricFogUVMax;
	 float  InstancedView_VolumetricFogMaxDistance;
	 float  PrePadding_InstancedView_5860;
	 float  PrePadding_InstancedView_5864;
	 float  PrePadding_InstancedView_5868;
	 float3  InstancedView_VolumetricLightmapWorldToUVScale;
	 float  PrePadding_InstancedView_5884;
	 float3  InstancedView_VolumetricLightmapWorldToUVAdd;
	 float  PrePadding_InstancedView_5900;
	 float3  InstancedView_VolumetricLightmapIndirectionTextureSize;
	 float  InstancedView_VolumetricLightmapBrickSize;
	 float3  InstancedView_VolumetricLightmapBrickTexelSize;
	 float  InstancedView_IndirectLightingCacheShowFlag;
	 float  InstancedView_EyeToPixelSpreadAngle;
	 float  PrePadding_InstancedView_5940;
	 float  PrePadding_InstancedView_5944;
	 float  PrePadding_InstancedView_5948;
	 float4  InstancedView_XRPassthroughCameraUVs[2];
	 float  InstancedView_GlobalVirtualTextureMipBias;
	 uint  InstancedView_VirtualTextureFeedbackShift;
	 uint  InstancedView_VirtualTextureFeedbackMask;
	 uint  InstancedView_VirtualTextureFeedbackStride;
	 uint  InstancedView_VirtualTextureFeedbackJitterOffset;
	 uint  InstancedView_VirtualTextureFeedbackSampleOffset;
	 uint  PrePadding_InstancedView_6008;
	 uint  PrePadding_InstancedView_6012;
	 float4  InstancedView_RuntimeVirtualTextureMipLevel;
	 float2  InstancedView_RuntimeVirtualTexturePackHeight;
	 float  PrePadding_InstancedView_6040;
	 float  PrePadding_InstancedView_6044;
	 float4  InstancedView_RuntimeVirtualTextureDebugParams;
	 float  InstancedView_OverrideLandscapeLOD;
	 int  InstancedView_FarShadowStaticMeshLODBias;
	 float  InstancedView_MinRoughness;
	 float  PrePadding_InstancedView_6076;
	 float4  InstancedView_HairRenderInfo;
	 uint  InstancedView_EnableSkyLight;
	 uint  InstancedView_HairRenderInfoBits;
	 uint  InstancedView_HairComponents;
	 float  InstancedView_bSubsurfacePostprocessEnabled;
	 float4  InstancedView_SSProfilesTextureSizeAndInvSize;
	 float4  InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float4  InstancedView_SpecularProfileTextureSizeAndInvSize;
	 float3  InstancedView_PhysicsFieldClipmapCenter;
	 float  InstancedView_PhysicsFieldClipmapDistance;
	 int  InstancedView_PhysicsFieldClipmapResolution;
	 int  InstancedView_PhysicsFieldClipmapExponent;
	 int  InstancedView_PhysicsFieldClipmapCount;
	 int  InstancedView_PhysicsFieldTargetCount;
	 int4  InstancedView_PhysicsFieldTargets[32];
	 uint4  InstancedView_GPUSceneViewId[2];
	 float  InstancedView_ViewResolutionFraction;
	 float  InstancedView_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 float  PrePadding_InstancedView_6744;
	 float  PrePadding_InstancedView_6748;
	 float4  InstancedView_TanAndInvTanHalfFOV[2];
	 float4  InstancedView_PrevTanAndInvTanHalfFOV[2];
	 float4  InstancedView_GlintLUTParameters0[2];
	 float4  InstancedView_GlintLUTParameters1[2];
}

#line 3 "/Engine/Generated/UniformBuffers/MobileReflectionCapture.ush"
cbuffer   MobileReflectionCapture 
{
	 float4  MobileReflectionCapture_Params;
	 uint BindlessResource_MobileReflectionCapture_Texture ;
	 uint  PrePadding_MobileReflectionCapture_20;
	 uint BindlessSampler_MobileReflectionCapture_TextureSampler ;
}

#line 10 "/Engine/Generated/UniformBuffers/MobileReflectionCapture.ush"
TextureCube  MobileReflectionCapture_Texture;

#line 11 "/Engine/Generated/UniformBuffers/MobileReflectionCapture.ush"
SamplerState  MobileReflectionCapture_TextureSampler;

#line 3 "/Engine/Generated/UniformBuffers/PrimitiveDither.ush"
cbuffer   PrimitiveDither 
{
	 min16float  PrimitiveDither_LODFactor;
}

#line 3 "/Engine/Generated/UniformBuffers/PrimitiveFade.ush"
cbuffer   PrimitiveFade 
{
	 min16float2  PrimitiveFade_FadeTimeScaleBias;
}

#line 3 "/Engine/Generated/UniformBuffers/Primitive.ush"
cbuffer   Primitive 
{
	 uint  Primitive_Flags;
	 uint  Primitive_InstanceSceneDataOffset;
	 uint  Primitive_NumInstanceSceneDataEntries;
	 int  Primitive_SingleCaptureIndex;
	 float3  Primitive_TilePosition;
	 uint  Primitive_PrimitiveComponentId;
	 float4x4  Primitive_LocalToRelativeWorld;
	 float4x4  Primitive_RelativeWorldToLocal;
	 float4x4  Primitive_PreviousLocalToRelativeWorld;
	 float4x4  Primitive_PreviousRelativeWorldToLocal;
	 float4x4  Primitive_WorldToPreviousWorld;
	 min16float3  Primitive_InvNonUniformScale;
	 float  Primitive_ObjectBoundsX;
	 float4  Primitive_ObjectRelativeWorldPositionAndRadius;
	 float3  Primitive_ActorRelativeWorldPosition;
	 uint  Primitive_LightmapUVIndex;
	 min16float3  Primitive_ObjectOrientation;
	 uint  Primitive_LightmapDataIndex;
	 min16float4  Primitive_NonUniformScale;
	 float3  Primitive_PreSkinnedLocalBoundsMin;
	 uint  Primitive_NaniteResourceID;
	 float3  Primitive_PreSkinnedLocalBoundsMax;
	 uint  Primitive_NaniteHierarchyOffset;
	 float3  Primitive_LocalObjectBoundsMin;
	 float  Primitive_ObjectBoundsY;
	 float3  Primitive_LocalObjectBoundsMax;
	 float  Primitive_ObjectBoundsZ;
	 float3  Primitive_InstanceLocalBoundsCenter;
	 uint  Primitive_InstancePayloadDataOffset;
	 float3  Primitive_InstanceLocalBoundsExtent;
	 uint  Primitive_InstancePayloadDataStride;
	 uint  Primitive_InstancePayloadExtensionSize;
	 uint  PrePadding_Primitive_532;
	 uint  PrePadding_Primitive_536;
	 uint  PrePadding_Primitive_540;
	 float3  Primitive_WireframeColor;
	 uint  Primitive_PackedNaniteFlags;
	 float3  Primitive_LevelColor;
	 int  Primitive_PersistentPrimitiveIndex;
	 float2  Primitive_InstanceDrawDistanceMinMaxSquared;
	 float  Primitive_InstanceWPODisableDistanceSquared;
	 uint  Primitive_NaniteRayTracingDataOffset;
	 float  Primitive_MaxWPOExtent;
	 float  Primitive_MinMaterialDisplacement;
	 float  Primitive_MaxMaterialDisplacement;
	 uint  Primitive_CustomStencilValueAndMask;
	 uint  Primitive_VisibilityFlags;
	 uint  PrePadding_Primitive_612;
	 uint  PrePadding_Primitive_616;
	 uint  PrePadding_Primitive_620;
	 float4  Primitive_CustomPrimitiveData[9];
}

#line 3 "/Engine/Generated/UniformBuffers/MobileBasePass.ush"
cbuffer   MobileBasePass 
{
	 float  MobileBasePass_AmbientOcclusionStaticFraction;
	 float  PrePadding_MobileBasePass_Fog_4;
	 float  PrePadding_MobileBasePass_Fog_8;
	 float  PrePadding_MobileBasePass_Fog_12;
	 float4  MobileBasePass_Fog_ExponentialFogParameters;
	 float4  MobileBasePass_Fog_ExponentialFogParameters2;
	 float4  MobileBasePass_Fog_ExponentialFogColorParameter;
	 float4  MobileBasePass_Fog_ExponentialFogParameters3;
	 float4  MobileBasePass_Fog_SkyAtmosphereAmbientContributionColorScale;
	 float4  MobileBasePass_Fog_InscatteringLightDirection;
	 float4  MobileBasePass_Fog_DirectionalInscatteringColor;
	 float2  MobileBasePass_Fog_SinCosInscatteringColorCubemapRotation;
	 float  PrePadding_MobileBasePass_Fog_136;
	 float  PrePadding_MobileBasePass_Fog_140;
	 float3  MobileBasePass_Fog_FogInscatteringTextureParameters;
	 float  MobileBasePass_Fog_ApplyVolumetricFog;
	 float  MobileBasePass_Fog_VolumetricFogStartDistance;
	 float  MobileBasePass_Fog_VolumetricFogNearFadeInDistanceInv;
	 uint BindlessResource_MobileBasePass_Fog_FogInscatteringColorCubemap ;
	 uint  PrePadding_MobileBasePass_Fog_172;
	 uint BindlessSampler_MobileBasePass_Fog_FogInscatteringColorSampler ;
	 uint  PrePadding_MobileBasePass_Fog_180;
	 uint BindlessResource_MobileBasePass_Fog_IntegratedLightScattering ;
	 uint  PrePadding_MobileBasePass_Fog_188;
	 uint BindlessSampler_MobileBasePass_Fog_IntegratedLightScatteringSampler ;
	 float  PrePadding_MobileBasePass_Forward_196;
	 float  PrePadding_MobileBasePass_Forward_200;
	 float  PrePadding_MobileBasePass_Forward_204;
	 uint  MobileBasePass_Forward_NumLocalLights;
	 uint  MobileBasePass_Forward_NumReflectionCaptures;
	 uint  MobileBasePass_Forward_HasDirectionalLight;
	 uint  MobileBasePass_Forward_NumGridCells;
	 int3  MobileBasePass_Forward_CulledGridSize;
	 uint  MobileBasePass_Forward_MaxCulledLightsPerCell;
	 uint  MobileBasePass_Forward_LightGridPixelSizeShift;
	 uint  PrePadding_MobileBasePass_Forward_244;
	 uint  PrePadding_MobileBasePass_Forward_248;
	 uint  PrePadding_MobileBasePass_Forward_252;
	 float3  MobileBasePass_Forward_LightGridZParams;
	 float  PrePadding_MobileBasePass_Forward_268;
	 float3  MobileBasePass_Forward_DirectionalLightDirection;
	 float  MobileBasePass_Forward_DirectionalLightSourceRadius;
	 float3  MobileBasePass_Forward_DirectionalLightColor;
	 float  MobileBasePass_Forward_DirectionalLightVolumetricScatteringIntensity;
	 uint  MobileBasePass_Forward_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_MobileBasePass_Forward_308;
	 float2  MobileBasePass_Forward_DirectionalLightDistanceFadeMAD;
	 uint  MobileBasePass_Forward_NumDirectionalLightCascades;
	 int  MobileBasePass_Forward_DirectionalLightVSM;
	 int  PrePadding_MobileBasePass_Forward_328;
	 int  PrePadding_MobileBasePass_Forward_332;
	 float4  MobileBasePass_Forward_CascadeEndDepths;
	 float4x4  MobileBasePass_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  MobileBasePass_Forward_DirectionalLightShadowmapMinMax[4];
	 float4  MobileBasePass_Forward_DirectionalLightShadowmapAtlasBufferSize;
	 float  MobileBasePass_Forward_DirectionalLightDepthBias;
	 uint  MobileBasePass_Forward_DirectionalLightUseStaticShadowing;
	 uint  MobileBasePass_Forward_SimpleLightsEndIndex;
	 uint  MobileBasePass_Forward_ClusteredDeferredSupportedEndIndex;
	 uint  MobileBasePass_Forward_LumenSupportedStartIndex;
	 uint  PrePadding_MobileBasePass_Forward_708;
	 uint  PrePadding_MobileBasePass_Forward_712;
	 uint  PrePadding_MobileBasePass_Forward_716;
	 float4  MobileBasePass_Forward_DirectionalLightStaticShadowBufferSize;
	 float4x4  MobileBasePass_Forward_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  MobileBasePass_Forward_DirectLightingShowFlag;
	 float  PrePadding_MobileBasePass_Forward_DirectionalLightSMRTSettings_804;
	 float  PrePadding_MobileBasePass_Forward_DirectionalLightSMRTSettings_808;
	 float  PrePadding_MobileBasePass_Forward_DirectionalLightSMRTSettings_812;
	 float  MobileBasePass_Forward_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  MobileBasePass_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_MobileBasePass_Forward_852;
	 uint  PrePadding_MobileBasePass_Forward_856;
	 uint  PrePadding_MobileBasePass_Forward_860;
	 uint BindlessResource_MobileBasePass_Forward_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_MobileBasePass_Forward_868;
	 uint BindlessSampler_MobileBasePass_Forward_ShadowmapSampler ;
	 uint  PrePadding_MobileBasePass_Forward_876;
	 uint BindlessResource_MobileBasePass_Forward_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_MobileBasePass_Forward_884;
	 uint BindlessSampler_MobileBasePass_Forward_StaticShadowmapSampler ;
	 uint  PrePadding_MobileBasePass_Forward_892;
	 uint BindlessResource_MobileBasePass_Forward_ForwardLocalLightBuffer ;
	 uint  PrePadding_MobileBasePass_Forward_900;
	 uint BindlessResource_MobileBasePass_Forward_NumCulledLightsGrid ;
	 uint  PrePadding_MobileBasePass_Forward_908;
	 uint BindlessResource_MobileBasePass_Forward_CulledLightDataGrid32Bit ;
	 uint  PrePadding_MobileBasePass_Forward_916;
	 uint BindlessResource_MobileBasePass_Forward_CulledLightDataGrid16Bit ;
	 float  PrePadding_MobileBasePass_ForwardMMV_924;
	 uint  MobileBasePass_ForwardMMV_NumLocalLights;
	 uint  MobileBasePass_ForwardMMV_NumReflectionCaptures;
	 uint  MobileBasePass_ForwardMMV_HasDirectionalLight;
	 uint  MobileBasePass_ForwardMMV_NumGridCells;
	 int3  MobileBasePass_ForwardMMV_CulledGridSize;
	 uint  MobileBasePass_ForwardMMV_MaxCulledLightsPerCell;
	 uint  MobileBasePass_ForwardMMV_LightGridPixelSizeShift;
	 uint  PrePadding_MobileBasePass_ForwardMMV_964;
	 uint  PrePadding_MobileBasePass_ForwardMMV_968;
	 uint  PrePadding_MobileBasePass_ForwardMMV_972;
	 float3  MobileBasePass_ForwardMMV_LightGridZParams;
	 float  PrePadding_MobileBasePass_ForwardMMV_988;
	 float3  MobileBasePass_ForwardMMV_DirectionalLightDirection;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSourceRadius;
	 float3  MobileBasePass_ForwardMMV_DirectionalLightColor;
	 float  MobileBasePass_ForwardMMV_DirectionalLightVolumetricScatteringIntensity;
	 uint  MobileBasePass_ForwardMMV_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1028;
	 float2  MobileBasePass_ForwardMMV_DirectionalLightDistanceFadeMAD;
	 uint  MobileBasePass_ForwardMMV_NumDirectionalLightCascades;
	 int  MobileBasePass_ForwardMMV_DirectionalLightVSM;
	 int  PrePadding_MobileBasePass_ForwardMMV_1048;
	 int  PrePadding_MobileBasePass_ForwardMMV_1052;
	 float4  MobileBasePass_ForwardMMV_CascadeEndDepths;
	 float4x4  MobileBasePass_ForwardMMV_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  MobileBasePass_ForwardMMV_DirectionalLightShadowmapMinMax[4];
	 float4  MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlasBufferSize;
	 float  MobileBasePass_ForwardMMV_DirectionalLightDepthBias;
	 uint  MobileBasePass_ForwardMMV_DirectionalLightUseStaticShadowing;
	 uint  MobileBasePass_ForwardMMV_SimpleLightsEndIndex;
	 uint  MobileBasePass_ForwardMMV_ClusteredDeferredSupportedEndIndex;
	 uint  MobileBasePass_ForwardMMV_LumenSupportedStartIndex;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1428;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1432;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1436;
	 float4  MobileBasePass_ForwardMMV_DirectionalLightStaticShadowBufferSize;
	 float4x4  MobileBasePass_ForwardMMV_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  MobileBasePass_ForwardMMV_DirectLightingShowFlag;
	 float  PrePadding_MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_1524;
	 float  PrePadding_MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_1528;
	 float  PrePadding_MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_1532;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  MobileBasePass_ForwardMMV_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1572;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1576;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1580;
	 uint BindlessResource_MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1588;
	 uint BindlessSampler_MobileBasePass_ForwardMMV_ShadowmapSampler ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1596;
	 uint BindlessResource_MobileBasePass_ForwardMMV_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1604;
	 uint BindlessSampler_MobileBasePass_ForwardMMV_StaticShadowmapSampler ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1612;
	 uint BindlessResource_MobileBasePass_ForwardMMV_ForwardLocalLightBuffer ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1620;
	 uint BindlessResource_MobileBasePass_ForwardMMV_NumCulledLightsGrid ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1628;
	 uint BindlessResource_MobileBasePass_ForwardMMV_CulledLightDataGrid32Bit ;
	 uint  PrePadding_MobileBasePass_ForwardMMV_1636;
	 uint BindlessResource_MobileBasePass_ForwardMMV_CulledLightDataGrid16Bit ;
	 float  PrePadding_MobileBasePass_PlanarReflection_1644;
	 float4  MobileBasePass_PlanarReflection_ReflectionPlane;
	 float4  MobileBasePass_PlanarReflection_PlanarReflectionOrigin;
	 float4  MobileBasePass_PlanarReflection_PlanarReflectionXAxis;
	 float4  MobileBasePass_PlanarReflection_PlanarReflectionYAxis;
	 float3x4  MobileBasePass_PlanarReflection_InverseTransposeMirrorMatrix;
	 float3  MobileBasePass_PlanarReflection_PlanarReflectionParameters;
	 float  PrePadding_MobileBasePass_PlanarReflection_1772;
	 float2  MobileBasePass_PlanarReflection_PlanarReflectionParameters2;
	 float  PrePadding_MobileBasePass_PlanarReflection_1784;
	 float  PrePadding_MobileBasePass_PlanarReflection_1788;
	 float4x4  MobileBasePass_PlanarReflection_ProjectionWithExtraFOV[2];
	 float4  MobileBasePass_PlanarReflection_PlanarReflectionScreenScaleBias[2];
	 float2  MobileBasePass_PlanarReflection_PlanarReflectionScreenBound;
	 uint  MobileBasePass_PlanarReflection_bIsStereo;
	 uint  PrePadding_MobileBasePass_PlanarReflection_1964;
	 uint BindlessResource_MobileBasePass_PlanarReflection_PlanarReflectionTexture ;
	 uint  PrePadding_MobileBasePass_PlanarReflection_1972;
	 uint BindlessSampler_MobileBasePass_PlanarReflection_PlanarReflectionSampler ;
	 float  PrePadding_MobileBasePass_SceneTextures_1980;
	 uint BindlessResource_MobileBasePass_SceneTextures_SceneColorTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_1988;
	 uint BindlessSampler_MobileBasePass_SceneTextures_SceneColorTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_1996;
	 uint BindlessResource_MobileBasePass_SceneTextures_SceneDepthTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2004;
	 uint BindlessSampler_MobileBasePass_SceneTextures_SceneDepthTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2012;
	 uint BindlessResource_MobileBasePass_SceneTextures_ScenePartialDepthTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2020;
	 uint BindlessSampler_MobileBasePass_SceneTextures_ScenePartialDepthTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2028;
	 uint BindlessResource_MobileBasePass_SceneTextures_CustomDepthTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2036;
	 uint BindlessSampler_MobileBasePass_SceneTextures_CustomDepthTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2044;
	 uint BindlessResource_MobileBasePass_SceneTextures_CustomStencilTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2052;
	 uint BindlessResource_MobileBasePass_SceneTextures_SceneVelocityTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2060;
	 uint BindlessSampler_MobileBasePass_SceneTextures_SceneVelocityTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2068;
	 uint BindlessResource_MobileBasePass_SceneTextures_GBufferATexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2076;
	 uint BindlessResource_MobileBasePass_SceneTextures_GBufferBTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2084;
	 uint BindlessResource_MobileBasePass_SceneTextures_GBufferCTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2092;
	 uint BindlessResource_MobileBasePass_SceneTextures_GBufferDTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2100;
	 uint BindlessResource_MobileBasePass_SceneTextures_SceneDepthAuxTexture ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2108;
	 uint BindlessResource_MobileBasePass_SceneTextures_LocalLightTextureA ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2116;
	 uint BindlessResource_MobileBasePass_SceneTextures_LocalLightTextureB ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2124;
	 uint BindlessSampler_MobileBasePass_SceneTextures_GBufferATextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2132;
	 uint BindlessSampler_MobileBasePass_SceneTextures_GBufferBTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2140;
	 uint BindlessSampler_MobileBasePass_SceneTextures_GBufferCTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2148;
	 uint BindlessSampler_MobileBasePass_SceneTextures_GBufferDTextureSampler ;
	 uint  PrePadding_MobileBasePass_SceneTextures_2156;
	 uint BindlessSampler_MobileBasePass_SceneTextures_SceneDepthAuxTextureSampler ;
	 float  PrePadding_MobileBasePass_Strata_2164;
	 float  PrePadding_MobileBasePass_Strata_2168;
	 float  PrePadding_MobileBasePass_Strata_2172;
	 uint  MobileBasePass_Strata_MaxBytesPerPixel;
	 uint  MobileBasePass_Strata_bRoughDiffuse;
	 uint  MobileBasePass_Strata_PeelLayersAboveDepth;
	 uint  MobileBasePass_Strata_bRoughnessTracking;
	 float4  MobileBasePass_DebugViewMode_AccuracyColors[5];
	 float4  MobileBasePass_DebugViewMode_LODColors[8];
	 uint BindlessResource_MobileBasePass_QuadOverdraw ;
	 float  PrePadding_MobileBasePass_ReflectionsParameters_2404;
	 float  PrePadding_MobileBasePass_ReflectionsParameters_2408;
	 float  PrePadding_MobileBasePass_ReflectionsParameters_2412;
	 float4  MobileBasePass_ReflectionsParameters_SkyLightParameters;
	 uint BindlessResource_MobileBasePass_ReflectionsParameters_SkyLightCubemap ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2436;
	 uint BindlessSampler_MobileBasePass_ReflectionsParameters_SkyLightCubemapSampler ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2444;
	 uint BindlessResource_MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemap ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2452;
	 uint BindlessSampler_MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemapSampler ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2460;
	 uint BindlessResource_MobileBasePass_ReflectionsParameters_ReflectionCubemap ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2468;
	 uint BindlessSampler_MobileBasePass_ReflectionsParameters_ReflectionCubemapSampler ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2476;
	 uint BindlessResource_MobileBasePass_ReflectionsParameters_PreIntegratedGF ;
	 uint  PrePadding_MobileBasePass_ReflectionsParameters_2484;
	 uint BindlessSampler_MobileBasePass_ReflectionsParameters_PreIntegratedGFSampler ;
	 uint  PrePadding_MobileBasePass_2492;
	 uint BindlessResource_MobileBasePass_PreIntegratedGFTexture ;
	 uint  PrePadding_MobileBasePass_2500;
	 uint BindlessSampler_MobileBasePass_PreIntegratedGFSampler ;
	 uint  PrePadding_MobileBasePass_2508;
	 uint BindlessResource_MobileBasePass_EyeAdaptationBuffer ;
	 uint  PrePadding_MobileBasePass_2516;
	 uint BindlessResource_MobileBasePass_RWOcclusionBufferUAV ;
	 uint  PrePadding_MobileBasePass_2524;
	 uint BindlessResource_MobileBasePass_AmbientOcclusionTexture ;
	 uint  PrePadding_MobileBasePass_2532;
	 uint BindlessSampler_MobileBasePass_AmbientOcclusionSampler ;
	 uint  PrePadding_MobileBasePass_2540;
	 uint BindlessResource_MobileBasePass_ScreenSpaceShadowMaskTexture ;
	 uint  PrePadding_MobileBasePass_2548;
	 uint BindlessSampler_MobileBasePass_ScreenSpaceShadowMaskSampler ;
}

#line 309 "/Engine/Generated/UniformBuffers/MobileBasePass.ush"
Texture2D  MobileBasePass_SceneTextures_CustomDepthTexture;

#line 310 "/Engine/Generated/UniformBuffers/MobileBasePass.ush"
SamplerState  MobileBasePass_SceneTextures_CustomDepthTextureSampler;

#line 311 "/Engine/Generated/UniformBuffers/MobileBasePass.ush"
Texture2D<uint2>  MobileBasePass_SceneTextures_CustomStencilTexture;

#line 318 "/Engine/Generated/UniformBuffers/MobileBasePass.ush"
Texture2D  MobileBasePass_SceneTextures_SceneDepthAuxTexture;

#line 325 "/Engine/Generated/UniformBuffers/MobileBasePass.ush"
SamplerState  MobileBasePass_SceneTextures_SceneDepthAuxTextureSampler;

#line 3 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
cbuffer   PrecomputedLightingBuffer 
{
	 float4  PrecomputedLightingBuffer_StaticShadowMapMasks;
	 float4  PrecomputedLightingBuffer_InvUniformPenumbraSizes;
	 float4  PrecomputedLightingBuffer_LightMapCoordinateScaleBias;
	 float4  PrecomputedLightingBuffer_ShadowMapCoordinateScaleBias;
	 min16float4  PrecomputedLightingBuffer_LightMapScale[2];
	 min16float4  PrecomputedLightingBuffer_LightMapAdd[2];
	 uint4  PrecomputedLightingBuffer_LightmapVTPackedPageTableUniform[2];
	 uint4  PrecomputedLightingBuffer_LightmapVTPackedUniform[5];
}

#line 3 "/Engine/Generated/UniformBuffers/IndirectLightingCache.ush"
cbuffer   IndirectLightingCache 
{
	 float3  IndirectLightingCache_IndirectLightingCachePrimitiveAdd;
	 float  PrePadding_IndirectLightingCache_12;
	 float3  IndirectLightingCache_IndirectLightingCachePrimitiveScale;
	 float  PrePadding_IndirectLightingCache_28;
	 float3  IndirectLightingCache_IndirectLightingCacheMinUV;
	 float  PrePadding_IndirectLightingCache_44;
	 float3  IndirectLightingCache_IndirectLightingCacheMaxUV;
	 float  PrePadding_IndirectLightingCache_60;
	 float4  IndirectLightingCache_PointSkyBentNormal;
	 min16float  IndirectLightingCache_DirectionalLightShadowing;
	 min16float  PrePadding_IndirectLightingCache_84;
	 min16float  PrePadding_IndirectLightingCache_88;
	 min16float  PrePadding_IndirectLightingCache_92;
	 float4  IndirectLightingCache_IndirectLightingSHCoefficients0[3];
	 float4  IndirectLightingCache_IndirectLightingSHCoefficients1[3];
	 float4  IndirectLightingCache_IndirectLightingSHCoefficients2;
	 min16float4  IndirectLightingCache_IndirectLightingSHSingleCoefficient;
	 uint BindlessResource_IndirectLightingCache_IndirectLightingCacheTexture0 ;
	 uint  PrePadding_IndirectLightingCache_228;
	 uint BindlessResource_IndirectLightingCache_IndirectLightingCacheTexture1 ;
	 uint  PrePadding_IndirectLightingCache_236;
	 uint BindlessResource_IndirectLightingCache_IndirectLightingCacheTexture2 ;
	 uint  PrePadding_IndirectLightingCache_244;
	 uint BindlessSampler_IndirectLightingCache_IndirectLightingCacheTextureSampler0 ;
	 uint  PrePadding_IndirectLightingCache_252;
	 uint BindlessSampler_IndirectLightingCache_IndirectLightingCacheTextureSampler1 ;
	 uint  PrePadding_IndirectLightingCache_260;
	 uint BindlessSampler_IndirectLightingCache_IndirectLightingCacheTextureSampler2 ;
}

#line 3 "/Engine/Generated/UniformBuffers/MobileDirectionalLight.ush"
cbuffer   MobileDirectionalLight 
{
	 min16float4  MobileDirectionalLight_DirectionalLightColor;
	 min16float4  MobileDirectionalLight_DirectionalLightDirectionAndShadowTransition;
	 min16float4  MobileDirectionalLight_DirectionalLightShadowSize;
	 min16float4  MobileDirectionalLight_DirectionalLightDistanceFadeMADAndSpecularScale;
	 min16float4  MobileDirectionalLight_DirectionalLightShadowDistances;
	 float4x4  MobileDirectionalLight_DirectionalLightScreenToShadow[4];
	 uint  MobileDirectionalLight_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_MobileDirectionalLight_340;
	 uint BindlessResource_MobileDirectionalLight_DirectionalLightShadowTexture ;
	 uint  PrePadding_MobileDirectionalLight_348;
	 uint BindlessSampler_MobileDirectionalLight_DirectionalLightShadowSampler ;
}

#line 3 "/Engine/Generated/UniformBuffers/Material.ush"
cbuffer   Material 
{
	 float4  Material_PreshaderBuffer[1];
	 uint BindlessSampler_Material_Wrap_WorldGroupSettings ;
	 uint  PrePadding_Material_20;
	 uint BindlessSampler_Material_Clamp_WorldGroupSettings ;
}

#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	min16float3 ViewForward;
	min16float3 ViewUp;
	min16float3 ViewRight;
	min16float3 HMDViewNoRollUp;
	min16float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	min16float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	min16float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	min16float4 DiffuseOverrideParameter;
	min16float4 SpecularOverrideParameter;
	min16float4 NormalOverrideParameter;
	min16float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	min16float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	min16float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	min16float CameraCut;
	min16float UnlitViewmodeMask;
	min16float4 DirectionalLightColor;
	min16float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	min16float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	min16float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	FLWCInverseMatrix WorldToClip;
	FLWCMatrix ClipToWorld;
	FLWCMatrix ScreenToWorld;
	FLWCMatrix PrevClipToWorld;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};

#line 230 "/Engine/Generated/GeneratedInstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView);

#line 231 "/Engine/Generated/GeneratedInstancedStereo.ush"
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View_TranslatedWorldToClip;
	Result.RelativeWorldToClip = View_RelativeWorldToClip;
	Result.ClipToRelativeWorld = View_ClipToRelativeWorld;
	Result.TranslatedWorldToView = View_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View_CameraViewToTranslatedWorld;
	Result.ViewToClip = View_ViewToClip;
	Result.ViewToClipNoAA = View_ViewToClipNoAA;
	Result.ClipToView = View_ClipToView;
	Result.ClipToTranslatedWorld = View_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View_SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View_ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View_MobileMultiviewShadowTransform;
	Result.ViewTilePosition = View_ViewTilePosition;
	Result.MatrixTilePosition = View_MatrixTilePosition;
	Result.ViewForward = View_ViewForward;
	Result.ViewUp = View_ViewUp;
	Result.ViewRight = View_ViewRight;
	Result.HMDViewNoRollUp = View_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View_ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = View_RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View_TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = View_RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = View_RelativePreViewTranslation;
	Result.PrevViewToClip = View_PrevViewToClip;
	Result.PrevClipToView = View_PrevClipToView;
	Result.PrevTranslatedWorldToClip = View_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View_PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View_PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = View_PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = View_PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = View_RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = View_PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View_ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View_ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View_TemporalAAJitter;
	Result.GlobalClippingPlane = View_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View_ViewRectMin;
	Result.ViewSizeAndInvSize = View_ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View_ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View_LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View_ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View_BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View_ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View_NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View_ProjectionDepthThicknessScale;
	Result.PreExposure = View_PreExposure;
	Result.OneOverPreExposure = View_OneOverPreExposure;
	Result.DiffuseOverrideParameter = View_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View_SpecularOverrideParameter;
	Result.NormalOverrideParameter = View_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View_PrevFrameGameTime;
	Result.PrevFrameRealTime = View_PrevFrameRealTime;
	Result.OutOfBoundsMask = View_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View_CullingSign;
	Result.NearPlane = View_NearPlane;
	Result.GameTime = View_GameTime;
	Result.RealTime = View_RealTime;
	Result.DeltaTime = View_DeltaTime;
	Result.MaterialTextureMipBias = View_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View_MaterialTextureDerivativeMultiply;
	Result.Random = View_Random;
	Result.FrameNumber = View_FrameNumber;
	Result.FrameCounter = View_FrameCounter;
	Result.StateFrameIndexMod8 = View_StateFrameIndexMod8;
	Result.StateFrameIndex = View_StateFrameIndex;
	Result.DebugViewModeMask = View_DebugViewModeMask;
	Result.WorldIsPaused = View_WorldIsPaused;
	Result.CameraCut = View_CameraCut;
	Result.UnlitViewmodeMask = View_UnlitViewmodeMask;
	Result.DirectionalLightColor = View_DirectionalLightColor;
	Result.DirectionalLightDirection = View_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View_TemporalAAParams;
	Result.CircleDOFParams = View_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View_MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View_GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View_GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View_DemosaicVposOffset;
	Result.DecalDepthBias = View_DecalDepthBias;
	Result.IndirectLightingColorScale = View_IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View_PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View_PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View_AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View_AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View_AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View_AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View_SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View_SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View_SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View_SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View_RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View_RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View_RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View_SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = View_MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View_MobilePreviewMode;
	Result.HMDEyePaddingOffset = View_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View_StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View_GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View_GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View_GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View_GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View_GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View_GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View_GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View_GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View_GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View_GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View_MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View_NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View_CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View_NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View_NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View_DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View_DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View_VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View_VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View_VolumetricFogPrevUVMax;
	Result.VolumetricFogScreenToResourceUV = View_VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View_VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View_VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View_EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View_XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View_GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View_VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View_VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View_VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View_VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View_VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View_RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View_RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View_RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = View_OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = View_FarShadowStaticMeshLODBias;
	Result.MinRoughness = View_MinRoughness;
	Result.HairRenderInfo = View_HairRenderInfo;
	Result.EnableSkyLight = View_EnableSkyLight;
	Result.HairRenderInfoBits = View_HairRenderInfoBits;
	Result.HairComponents = View_HairComponents;
	Result.bSubsurfacePostprocessEnabled = View_bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View_SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View_SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View_PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View_PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View_PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View_PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View_PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View_PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View_PhysicsFieldTargets;
	Result.GPUSceneViewId = View_GPUSceneViewId;
	Result.ViewResolutionFraction = View_ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View_TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View_PrevTanAndInvTanHalfFOV;
	Result.GlintLUTParameters0 = View_GlintLUTParameters0;
	Result.GlintLUTParameters1 = View_GlintLUTParameters1;
	FinalizeViewState(Result);
	return Result;
}

#line 17 "/Engine/Private/InstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeLWCInverseMatrix(InOutView.MatrixTilePosition, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOrigin);
	InOutView.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOrigin);
	InOutView.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOrigin);
	InOutView.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOrigin);
	InOutView.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslation);
	InOutView.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslation);
}

#line 34 "/Engine/Private/InstancedStereo.ush"
static ViewState ResolvedView = (ViewState)0.0f;

#line 36 "/Engine/Private/InstancedStereo.ush"
ViewState ResolveView()
{
	return GetPrimaryView();
}

#line 285 "/Engine/Private/Common.ush"
min16float4 Texture2DSample(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return Tex.Sample(Sampler, UV);

}

#line 293 "/Engine/Private/Common.ush"
min16float4 Texture2DSample(Texture2D Tex, SamplerState Sampler, FloatDeriv2 UV)
{



	return Tex.SampleGrad(Sampler, UV.Value, UV.Ddx, UV.Ddy);

}

#line 337 "/Engine/Private/Common.ush"
min16float4 Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, min16float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 595 "/Engine/Private/Common.ush"
min16float Luminance( min16float3 LinearColor )
{
	return dot( LinearColor, min16float3( 0.3, 0.59, 0.11 ) );
}

#line 904 "/Engine/Private/Common.ush"
float Square( float x )
{
	return x*x;
}

#line 909 "/Engine/Private/Common.ush"
float2 Square( float2 x )
{
	return x*x;
}

#line 914 "/Engine/Private/Common.ush"
float3 Square( float3 x )
{
	return x*x;
}

#line 919 "/Engine/Private/Common.ush"
float4 Square( float4 x )
{
	return x*x;
}

#line 924 "/Engine/Private/Common.ush"
float Pow2( float x )
{
	return x*x;
}

#line 929 "/Engine/Private/Common.ush"
float2 Pow2( float2 x )
{
	return x*x;
}

#line 934 "/Engine/Private/Common.ush"
float3 Pow2( float3 x )
{
	return x*x;
}

#line 939 "/Engine/Private/Common.ush"
float4 Pow2( float4 x )
{
	return x*x;
}

#line 988 "/Engine/Private/Common.ush"
float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}

#line 994 "/Engine/Private/Common.ush"
float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}

#line 1000 "/Engine/Private/Common.ush"
float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}

#line 1006 "/Engine/Private/Common.ush"
float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}

#line 1179 "/Engine/Private/Common.ush"
float ConvertFromDeviceZ(float DeviceZ)
{
	
	return DeviceZ * View_InvDeviceZToWorldZTransform[0] + View_InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View_InvDeviceZToWorldZTransform[2] - View_InvDeviceZToWorldZTransform[3]);
}

#line 1187 "/Engine/Private/Common.ush"
bool IsOrthoProjection(float4x4 ViewToClip)
{
	return asuint(ViewToClip._44);
}

#line 1193 "/Engine/Private/Common.ush"
bool IsOrthoProjection()
{
	return IsOrthoProjection(View_ViewToClip);
}

#line 1229 "/Engine/Private/Common.ush"
float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

#line 1249 "/Engine/Private/Common.ush"
float2 SvPositionToBufferUV(float4 SvPosition)
{
	return SvPosition.xy * View_BufferSizeAndInvSize.zw;
}

#line 1293 "/Engine/Private/Common.ush"
float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;	

	
	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);

	
	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

#line 1366 "/Engine/Private/Common.ush"
min16float2 ScreenAlignedPosition( float4 ScreenPosition )
{
	return min16float2(ScreenPositionToBufferUV(ScreenPosition));
}

#line 1658 "/Engine/Private/Common.ush"
min16float3 TransformTangentVectorToWorld(min16float3x3 TangentToWorld, min16float3 InTangentVector)
{
	
	
	return mul(InTangentVector, TangentToWorld);
}

#line 191 "/Engine/Private/SceneTexturesCommon.ush"
float LookupDeviceZ( float2 ScreenUV )
{












	
	
	return Texture2DSampleLevel(MobileBasePass_SceneTextures_SceneDepthAuxTexture, MobileBasePass_SceneTextures_SceneDepthAuxTextureSampler, ScreenUV, 0).r;




}

#line 215 "/Engine/Private/SceneTexturesCommon.ush"
float CalcSceneDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(LookupDeviceZ(ScreenUV));

}

#line 13 "/Engine/Private/MonteCarlo.ush"
float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	
	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };

	return float3x3( TangentX, TangentY, TangentZ );
}

#line 48 "/Engine/Private/MonteCarlo.ush"
float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}

#line 93 "/Engine/Private/SceneData.ush"
struct FPrimitiveSceneData
{
	uint		Flags;
	uint		VisibilityFlags;
	int			InstanceSceneDataOffset; 
	int			NumInstanceSceneDataEntries;
	int			PersistentPrimitiveIndex;
	uint		SingleCaptureIndex; 
	float3		TilePosition;
	uint		PrimitiveComponentId; 
	FLWCMatrix	LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix	PreviousLocalToWorld;
	FLWCInverseMatrix PreviousWorldToLocal;
	float4x4	WorldToPreviousWorld; 
	float3		InvNonUniformScale;
	float		ObjectBoundsX;
	FLWCVector3	ObjectWorldPosition;
	FLWCVector3	ActorWorldPosition;
	float		ObjectRadius;
	uint		LightmapUVIndex;   
	float3		ObjectOrientation; 
	uint		LightmapDataIndex; 
	float4		NonUniformScale;
	float3		PreSkinnedLocalBoundsMin;
	uint		NaniteResourceID;
	float3		PreSkinnedLocalBoundsMax;
	uint		NaniteHierarchyOffset;
	float3		LocalObjectBoundsMin;
	float		ObjectBoundsY;
	float3		LocalObjectBoundsMax;
	float		ObjectBoundsZ;
	uint		InstancePayloadDataOffset;
	uint		InstancePayloadDataStride;
	uint		InstancePayloadExtensionSize;
	float3		InstanceLocalBoundsCenter;
	float3		InstanceLocalBoundsExtent;
	float3		WireframeColor; 
	float3		LevelColor; 
	uint		PackedNaniteFlags;
	float2 		InstanceDrawDistanceMinMaxSquared;
	float		InstanceWPODisableDistanceSquared;
	uint		NaniteRayTracingDataOffset;
	float		MaxWPOExtent;
	float		MinMaterialDisplacement;
	float		MaxMaterialDisplacement;
	uint		CustomStencilValueAndMask;
	float4		CustomPrimitiveData[9]; 
};

#line 434 "/Engine/Private/SceneData.ush"
struct FInstanceSceneData
{
	FLWCMatrix LocalToWorld;
	FLWCMatrix PrevLocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	float4   NonUniformScale;
	float3   InvNonUniformScale;
	float    DeterminantSign;
	float3   LocalBoundsCenter;
	uint     PrimitiveId;
	uint     RelativeId;
	uint     PayloadDataOffset;
	uint     PayloadExtensionOffset;
	uint     PayloadExtensionSize;
	float3   LocalBoundsExtent;
	uint     LastUpdateSceneFrameNumber;
	uint     NaniteRuntimeResourceID;
	uint     NaniteHierarchyOffset;








	float4   LightMapAndShadowMapUVBias;

	bool     ValidInstance;
	uint     Flags;




};

#line 1068 "/Engine/Private/SceneData.ush"
struct FSceneDataIntermediates
{
	uint PrimitiveId;
	uint InstanceId;
	uint ViewIndex;
	uint CullingFlags;
	
	uint InstanceIdLoadIndex;
	FInstanceSceneData InstanceData;
	FPrimitiveSceneData Primitive;
};

#line 47 "/Engine/Private/ShadingCommon.ush"
float3 GetShadingModelColor(uint ShadingModelID)
{
	
	
#line  66 "/Engine/Private/ShadingCommon.ush"

	switch(ShadingModelID)
	{
		case 0: return float3(0.1f, 0.1f, 0.2f); 
		case 1: return float3(0.1f, 1.0f, 0.1f); 
		case 2: return float3(1.0f, 0.1f, 0.1f); 
		case 3: return float3(0.6f, 0.4f, 0.1f); 
		case 4: return float3(0.1f, 0.4f, 0.4f); 
		case 5: return float3(0.2f, 0.6f, 0.5f); 
		case 6: return float3(0.2f, 0.2f, 0.8f); 
		case 7: return float3(0.6f, 0.1f, 0.5f);
		case 8: return float3(0.7f, 1.0f, 1.0f);
		case 9: return float3(0.3f, 1.0f, 1.0f);
		case 10: return float3(0.5f, 0.5f, 1.0f);
		case 11: return float3(1.0f, 0.8f, 0.3f);
		case 12: return float3(1.0f, 1.0f, 0.0f);
		default: return float3(1.0f, 1.0f, 1.0f); 
	}

}

#line 90 "/Engine/Private/ShadingCommon.ush"
bool GetShadingModelRequiresBackfaceLighting(uint ShadingModelID)
{
	return ShadingModelID == 6;
}

#line 113 "/Engine/Private/ShadingCommon.ush"
min16float DielectricSpecularToF0(min16float Specular)
{
	return min16float(0.08f * Specular);
}

#line 146 "/Engine/Private/ShadingCommon.ush"
min16float3 ComputeF0(min16float Specular, min16float3 BaseColor, min16float Metallic)
{
	return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
}

#line 24 "/Engine/Private/LightAccumulator.ush"
struct FLightAccumulator
{
	float3 TotalLight;

	
	
	
	float ScatterableLightLuma;

	
	
	
	float3 ScatterableLight;

	
	
	float EstimatedCost;

	
	
	float3 TotalLightDiffuse;
	float3 TotalLightSpecular;

};

#line 56 "/Engine/Private/LightAccumulator.ush"
void LightAccumulator_AddSplit(inout FLightAccumulator In, float3 DiffuseTotalLight, float3 SpecularTotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{
	
	In.TotalLight += (DiffuseTotalLight + SpecularTotalLight) * CommonMultiplier;

	
	if (bNeedsSeparateSubsurfaceLightAccumulation)
	{
		if (1 == 1)
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0)
			{
				In.ScatterableLightLuma += Luminance(ScatterableLight * CommonMultiplier);
			}
		}
		else if (1 == 2)
		{
			
			In.ScatterableLight += ScatterableLight * CommonMultiplier;
		}
	}

	In.TotalLightDiffuse += DiffuseTotalLight * CommonMultiplier;
	In.TotalLightSpecular += SpecularTotalLight * CommonMultiplier;
}

#line 296 "/Engine/Private/DeferredShadingCommon.ush"
bool IsSubsurfaceModel(int ShadingModel)
{
	return ShadingModel == 2 
		|| ShadingModel == 3 
		|| ShadingModel == 5
		|| ShadingModel == 6
		|| ShadingModel == 7
		|| ShadingModel == 9;
}

#line 329 "/Engine/Private/DeferredShadingCommon.ush"
struct FGBufferData
{
	
	min16float3 WorldNormal;
	
	min16float3 WorldTangent;
	
	min16float3 DiffuseColor;
	
	min16float3 SpecularColor;
	
	min16float3 BaseColor;
	
	min16float Metallic;
	
	min16float Specular;
	
	min16float4 CustomData;
	
	min16float GenericAO;
	
	min16float IndirectIrradiance;
	
	
	min16float4 PrecomputedShadowFactors;
	
	min16float Roughness;
	
	min16float Anisotropy;
	
	min16float GBufferAO;
	
	uint DiffuseIndirectSampleOcclusion;
	
	uint ShadingModelID;
	
	uint SelectiveOutputMask;
	
	min16float PerObjectGBufferData;
	
	min16float CustomDepth;
	
	uint CustomStencil;
	
	
	min16float Depth;
	
	min16float4 Velocity;

	
	min16float3 StoredBaseColor;
	
	min16float StoredSpecular;
	
	min16float StoredMetallic;

	
	min16float Curvature;
};

#line 801 "/Engine/Private/DeferredShadingCommon.ush"
FGBufferData MobileFetchAndDecodeGBuffer(in float2 UV, in float2 PixelPos)
{
	FGBufferData GBuffer = (FGBufferData)0;










	GBuffer.Depth = CalcSceneDepth(UV);


	GBuffer.CustomDepth = ConvertFromDeviceZ(Texture2DSample(MobileBasePass_SceneTextures_CustomDepthTexture, MobileBasePass_SceneTextures_CustomDepthTextureSampler, UV).r);
	GBuffer.CustomStencil = MobileBasePass_SceneTextures_CustomStencilTexture.Load(int3(PixelPos.xy, 0)) .g;

	return GBuffer;
}

#line 1031 "/Engine/Private/DeferredShadingCommon.ush"
float3 ExtractSubsurfaceColor(FGBufferData BufferData)
{
	return Square(BufferData.CustomData.rgb);
}

#line 1191 "/Engine/Private/DeferredShadingCommon.ush"
min16float3 AOMultiBounce(min16float3 BaseColor, min16float AO)
{
	if (1 && !0)
	{
		return AO;
	}
	else
	{
		min16float3 a = 2.0404 * BaseColor - 0.3324;
		min16float3 b = -4.7951 * BaseColor + 0.6417;
		min16float3 c = 2.7552 * BaseColor + 0.6903;
		return max(AO, ((AO * a + b) * AO + c) * AO);
	}
}

#line 169 "/Engine/Generated/Material.ush"
struct FStrataData
{
	uint Dummy;
};

#line 173 "/Engine/Generated/Material.ush"
FStrataData GetInitialisedStrataData() { return (FStrataData)0; }

#line 186 "/Engine/Generated/Material.ush"
struct FMaterialParticleParameters
{
	
	min16float RelativeTime;
	
	min16float MotionBlurFade;
	
	min16float Random;
	
	min16float4 Velocity;
	
	min16float4 Color;
	
	float4 TranslatedWorldPositionAndSize;
	
	min16float4 MacroUV;

	



	min16float4 DynamicParameter;













	
	FLWCMatrix ParticleToWorld;

	
	FLWCInverseMatrix WorldToParticle;








	
	float2 Size;

	
	float SpriteRotation;
};

#line 296 "/Engine/Generated/Material.ush"
struct FMaterialAttributes
{
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 Normal;
	float3 Tangent;
	float3 WorldPositionOffset;
	float Displacement;
	float3 SubsurfaceColor;
	float ClearCoat;
	float ClearCoatRoughness;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	float SurfaceThickness;
	FStrataData FrontMaterial;
	float2 CustomizedUV0;
	float2 CustomizedUV1;
	float2 CustomizedUV2;
	float2 CustomizedUV3;
	float2 CustomizedUV4;
	float2 CustomizedUV5;
	float2 CustomizedUV6;
	float2 CustomizedUV7;
	float3 BentNormal;
	float3 ClearCoatBottomNormal;
	float3 CustomEyeTangent;
	float3 TransmittanceColor;
};

#line 373 "/Engine/Generated/Material.ush"
struct FPixelMaterialInputs
{
	min16float3 EmissiveColor;
	min16float Opacity;
	min16float OpacityMask;
	min16float3 BaseColor;
	min16float Metallic;
	min16float Specular;
	min16float Roughness;
	min16float Anisotropy;
	min16float3 Normal;
	min16float3 Tangent;
	min16float4 Subsurface;
	min16float AmbientOcclusion;
	min16float3 Refraction;
	min16float PixelDepthOffset;
	uint ShadingModel;
	FStrataData FrontMaterial;
	min16float SurfaceThickness;
	min16float Displacement;












};

#line 411 "/Engine/Generated/Material.ush"
struct FMaterialPixelParameters
{




	
	min16float4 VertexColor;

	
	min16float3 WorldNormal;
	
	
	min16float3 WorldTangent;

	
	min16float3 ReflectionVector;

	
	float3 CameraVector;

	
	min16float3 LightVector;

	




	float4 SvPosition;
		
	
	float4 ScreenPosition;

	



	float2 ViewBufferUV;





	min16float UnMirrored;

	min16float TwoSidedSign;

	



	min16float3x3 TangentToWorld;






	



	FLWCVector3 AbsoluteWorldPosition;

	


	float3 WorldPosition_CamRelative;

	



	FLWCVector3 WorldPosition_NoOffsets;

	



	float3 WorldPosition_NoOffsets_CamRelative;

	
	min16float3 LightingPositionOffset;

	
	float3 WorldPosition_DDX;
	float3 WorldPosition_DDY;
	float4 VertexColor_DDX;
	float4 VertexColor_DDY;
	float4 ScreenPosition_DDX;
	float4 ScreenPosition_DDY;
	





	float AOMaterialMask;















	
	uint PrimitiveId;










	


















	
	FMaterialParticleParameters Particle;


	float4 LayerWeights;

































#line 620 "/Engine/Generated/Material.ush"


	FMaterialAttributes MaterialAttributes;
};

#line 639 "/Engine/Generated/Material.ush"
FMaterialPixelParameters MakeInitializedMaterialPixelParameters()
{
	FMaterialPixelParameters MPP;
	MPP = (FMaterialPixelParameters)0;
	MPP.TangentToWorld = float3x3(1,0,0,0,1,0,0,0,1);
	return MPP;
}

#line 651 "/Engine/Generated/Material.ush"
struct FMaterialVertexParameters
{
	
	
	
	float3 WorldPosition;
	
	min16float3x3 TangentToWorld;










	













	
	
	FLWCMatrix PrevFrameLocalToWorld;

	float3 PreSkinnedPosition;
	float3 PreSkinnedNormal;

	min16float4 VertexColor;












	
	FMaterialParticleParameters Particle;





	FMaterialAttributes MaterialAttributes;

	
	FSceneDataIntermediates SceneData;

	
	
	uint PrimitiveId;

	bool bEvaluateWorldPositionOffset;
};

#line 907 "/Engine/Generated/Material.ush"
float4 GetScreenPosition(FMaterialVertexParameters Parameters)
{
	return mul(float4(Parameters.WorldPosition, 1.0f), ResolvedView.TranslatedWorldToClip);
}

#line 912 "/Engine/Generated/Material.ush"
float4 GetScreenPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.ScreenPosition;
}

#line 948 "/Engine/Generated/Material.ush"
float2 GetSceneTextureUV(FMaterialVertexParameters Parameters)
{
	return ScreenAlignedPosition(GetScreenPosition(Parameters));
}

#line 953 "/Engine/Generated/Material.ush"
float2 GetSceneTextureUV(FMaterialPixelParameters Parameters)
{
	return SvPositionToBufferUV(Parameters.SvPosition);
}

#line 1111 "/Engine/Generated/Material.ush"
min16float2 GetDefaultSceneTextureUV(FMaterialVertexParameters Parameters, const uint SceneTextureId)
{
	return GetSceneTextureUV(Parameters);
}

#line 1117 "/Engine/Generated/Material.ush"
min16float2 GetDefaultSceneTextureUV(FMaterialPixelParameters Parameters, const uint SceneTextureId)
{
	


		return GetSceneTextureUV(Parameters);
	
}

#line 2023 "/Engine/Generated/Material.ush"
min16float3 GetMobileSkyLightReflection(min16float3 ReflectionVector, min16float Roughness, min16float CubemapMaxMip);

#line 2096 "/Engine/Generated/Material.ush"
min16float3 ReflectionAboutCustomWorldNormal(FMaterialPixelParameters Parameters, min16float3 WorldNormal, bool bNormalizeInputNormal)
{
	if (bNormalizeInputNormal)
	{
		WorldNormal = normalize(WorldNormal);
	}

	return -Parameters.CameraVector + WorldNormal * dot(WorldNormal, Parameters.CameraVector) * 2.0;
}

#line 2451 "/Engine/Generated/Material.ush"
min16float4 MobileSceneTextureLookup(inout FMaterialPixelParameters Parameters, int SceneTextureId, float2 UV)
{
#line 2466 "/Engine/Generated/Material.ush"

	const float2 PixelPos = UV * View_BufferSizeAndInvSize.xy;
	FGBufferData GBuffer = MobileFetchAndDecodeGBuffer(UV, PixelPos);

	switch(SceneTextureId)
	{
		
	case 1:
		return GBuffer.Depth;
	case 2:
		return min16float4(GBuffer.DiffuseColor, 0);
	case 3:
		return min16float4(GBuffer.SpecularColor, 0);
	case 4:
		return IsSubsurfaceModel(GBuffer.ShadingModelID) ? min16float4( ExtractSubsurfaceColor(GBuffer), GBuffer.CustomData.a ) : GBuffer.CustomData;
	case 5:
		return min16float4(GBuffer.BaseColor, 0);
	case 6:
		return GBuffer.Specular;
	case 7:
		return GBuffer.Metallic;
	case 8:
		return min16float4(GBuffer.WorldNormal, 0);
	case 9:
		return min16float4(1, 1, 1, 1);	
	case 10:
		return GBuffer.CustomData.a;
	case 11:
		return GBuffer.Roughness;
	case 12:
		return GBuffer.GBufferAO;
	case 13:
		return GBuffer.CustomDepth;
#line 2513 "/Engine/Generated/Material.ush"

	case 21:
		return 0;  
	case 22:
		return min16float4(GetShadingModelColor(GBuffer.ShadingModelID), 1);
	case 23:
		return min16float4(GBuffer.ShadingModelID, 0, 0, 0);
	case 24:
		return 1;
	case 25:
		return GBuffer.CustomStencil;
	case 29:
		return min16float4(GBuffer.WorldTangent, 0);
	default:
		return min16float4(0, 0, 0, 0);
	}

}

#line 2803 "/Engine/Generated/Material.ush"
min16float2 CustomExpression0(FMaterialPixelParameters Parameters)
{
return GetSceneTextureUV(Parameters);
}

#line 2809 "/Engine/Generated/Material.ush"
min16float2 CustomExpression1(FMaterialPixelParameters Parameters)
{
return View_BufferSizeAndInvSize.zw;
}

#line 2815 "/Engine/Generated/Material.ush"
min16float CustomExpression2(FMaterialPixelParameters Parameters,min16float2 UV,min16float2 TexelScale,min16float4 Depth)
{
min16float CenterDepth = Depth;



min16float D1 = abs(CenterDepth - SceneTextureLookup(UV + float2(-1, 0) * TexelScale, 1, false).r);

min16float D2 = abs(CenterDepth - SceneTextureLookup(UV + float2(0, -1) * TexelScale, 1, false).r);

min16float D3 = abs(CenterDepth - SceneTextureLookup(UV + float2(1, 0) * TexelScale, 1, false).r);

min16float D4 = abs(CenterDepth - SceneTextureLookup(UV + float2(0, 1) * TexelScale, 1, false).r);



min16float D5 = abs(CenterDepth - SceneTextureLookup(UV + float2(-2, 0) * TexelScale, 1, false).r);

min16float D6 = abs(CenterDepth - SceneTextureLookup(UV + float2(0, -2) * TexelScale, 1, false).r);

min16float D7 = abs(CenterDepth - SceneTextureLookup(UV + float2(2, 0) * TexelScale, 1, false).r);

min16float D8 = abs(CenterDepth - SceneTextureLookup(UV + float2(0, 2) * TexelScale, 1, false).r);



min16float D9 = abs(CenterDepth - SceneTextureLookup(UV + float2(-3, 0) * TexelScale, 1, false).r);

min16float D10 = abs(CenterDepth - SceneTextureLookup(UV + float2(0, -3) * TexelScale, 1, false).r);

min16float D11 = abs(CenterDepth - SceneTextureLookup(UV + float2(3, 0) * TexelScale, 1, false).r);

min16float D12 = abs(CenterDepth - SceneTextureLookup(UV + float2(0, 3) * TexelScale, 1, false).r);



min16float MaxDepthDifference = max(CenterDepth, 150) / 150;

min16float SceneNeighborDepth0 = saturate(max(max(D1, D2), max(D3, D4)) / MaxDepthDifference);

min16float SceneNeighborDepth1 = saturate(max(max(D5, D6), max(D7, D8)) / (MaxDepthDifference * 2));

min16float SceneNeighborDepth2 = saturate(max(max(D9, D10), max(D11, D12)) / (MaxDepthDifference * 3)) / 2;

min16float SceneNeighborDepth = max(max(SceneNeighborDepth0, SceneNeighborDepth1), SceneNeighborDepth2);

return saturate(1 - saturate(SceneNeighborDepth));
}

#line 2865 "/Engine/Generated/Material.ush"
min16float CustomExpression3(FMaterialPixelParameters Parameters,min16float2 UV,min16float2 TexelScale,min16float4 Color)
{
float3 CenterColor =  Color;



min16float3 C1 = SceneTextureLookup(UV + float2(-1, 0) * TexelScale, 0, false).rgb;

min16float3 C2 = SceneTextureLookup(UV + float2(0, -1) * TexelScale, 0, false).rgb;

min16float3 C3 = SceneTextureLookup(UV + float2(1, 0) * TexelScale, 0, false).rgb;

min16float3 C4 = SceneTextureLookup(UV + float2(0, 1) * TexelScale, 0, false).rgb;



float c1 = Luminance(C1);

float c2 = Luminance(CenterColor);

float l1 = max(c1, c2);

float l2 = min(c1, c2);

min16float L1 = ((l1 + 0.05) / (l2 + 0.05) - 1) / 20;



c1 = Luminance(C2);

l1 = max(c1, c2);

l2 = min(c1, c2);

min16float L2 = ((l1 + 0.05) / (l2 + 0.05) - 1) / 20;



c1 = Luminance(C3);

l1 = max(c1, c2);

l2 = min(c1, c2);

min16float L3 = ((l1 + 0.05) / (l2 + 0.05) - 1) / 20;



c1 = Luminance(C4);

l1 = max(c1, c2);

l2 = min(c1, c2);

min16float L4 = ((l1 + 0.05) / (l2 + 0.05) - 1) / 20;



min16float NeighborDifference = max(max(L1, L2), max(L3, L4));

return saturate(1 - NeighborDifference);
}

#line 2929 "/Engine/Generated/Material.ush"
min16float3 CustomExpression4(FMaterialPixelParameters Parameters,min16float2 UV,min16float4 Color,min16float2 TexelScale,min16float4 SharpenWeight)
{
float3 CenterColor =  Color;



min16float3 C1 = SceneTextureLookup(UV + float2(-1, 0) * TexelScale, 0, false).rgb;

min16float3 C2 = SceneTextureLookup(UV + float2(0, -1) * TexelScale, 0, false).rgb;

min16float3 C3 = SceneTextureLookup(UV + float2(1, 0) * TexelScale, 0, false).rgb;

min16float3 C4 = SceneTextureLookup(UV + float2(0, 1) * TexelScale, 0, false).rgb;



min16float A0 = Luminance(CenterColor);

min16float4 LuminanceNeightbors = min16float4(Luminance(C1), Luminance(C2), Luminance(C3), Luminance(C4));

float4 A0LuminanceNeightbors = abs(A0 - LuminanceNeightbors);

min16float HDREdge = max(max(A0LuminanceNeightbors.r, A0LuminanceNeightbors.g), max(A0LuminanceNeightbors.b, A0LuminanceNeightbors.a));

min16float EdgeMask = saturate(1.0f - HDREdge);

float LerpFactor = -EdgeMask * SharpenWeight;

min16float3 DeltaColor = (C1 + C2 + C3 + C4) - CenterColor * 4;

CenterColor.rgb += DeltaColor * LerpFactor;



return CenterColor.rgb;
}

#line 3059 "/Engine/Generated/Material.ush"
min16float3 GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

#line 3064 "/Engine/Generated/Material.ush"
min16float3 GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	min16float3 RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);
		
	












	return RetNormal;
}

#line 3096 "/Engine/Generated/Material.ush"
min16float3 GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

#line 3101 "/Engine/Generated/Material.ush"
min16float3 GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	min16float3 EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

#line 3116 "/Engine/Generated/Material.ush"
uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

#line 3121 "/Engine/Generated/Material.ush"
min16float3 GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

#line 3126 "/Engine/Generated/Material.ush"
min16float3 GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

#line 3131 "/Engine/Generated/Material.ush"
min16float GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

#line 3136 "/Engine/Generated/Material.ush"
min16float GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

#line 3141 "/Engine/Generated/Material.ush"
min16float GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

#line 3146 "/Engine/Generated/Material.ush"
min16float GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

#line 3151 "/Engine/Generated/Material.ush"
min16float GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

#line 3156 "/Engine/Generated/Material.ush"
min16float GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{



	min16float Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));
	
	





	
	return Roughness;
}

#line 3173 "/Engine/Generated/Material.ush"
min16float GetMaterialAnisotropyRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Anisotropy;
}

#line 3178 "/Engine/Generated/Material.ush"
min16float GetMaterialAnisotropy(FPixelMaterialInputs PixelMaterialInputs)
{
	return clamp(GetMaterialAnisotropyRaw(PixelMaterialInputs), -1.0f, 1.0f);
}

#line 3251 "/Engine/Generated/Material.ush"
min16float GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}

#line 3273 "/Engine/Generated/Material.ush"
min16float GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{
	
	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}

#line 3365 "/Engine/Generated/Material.ush"
min16float GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

#line 3370 "/Engine/Generated/Material.ush"
min16float GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

#line 3450 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld(min16float3x3 TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}

#line 3511 "/Engine/Generated/Material.ush"
void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{
	

	
	PixelMaterialInputs.Normal = min16float3(0.00000000,0.00000000,1.00000000);












	
	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);








	
	
	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);








	
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;


	
	min16float2 Local0 = CustomExpression0(Parameters);
	min16float4 Local1 = MobileSceneTextureLookup(Parameters, 14, GetDefaultSceneTextureUV(Parameters, 14));
	min16float2 Local2 = CustomExpression1(Parameters);
	min16float4 Local3 = MobileSceneTextureLookup(Parameters, 1, GetDefaultSceneTextureUV(Parameters, 1));
	min16float Local4 = CustomExpression2(Parameters,Local0,Local2,Local3.rgba);
	min16float Local5 = CustomExpression3(Parameters,Local0,Local2,(float4(View_OneOverPreExposure.xxx, 1) * Local1).rgba);
	min16float Local6 = (Local4 * Local5);
	min16float Local7 = (Local6 * Material_PreshaderBuffer[0].x);
	min16float4 Local8 = (Local3.rgba * ((min16float4)Material_PreshaderBuffer[0].z));
	min16float4 Local9 = (((min16float4)1.00000000) - Local8);
	min16float4 Local10 = max(Local9,((min16float4)Material_PreshaderBuffer[0].w));
	min16float4 Local11 = min(Local10,((min16float4)1.00000000));
	min16float4 Local12 = (((min16float4)Local7) * Local11);
	min16float3 Local13 = CustomExpression4(Parameters,Local0,(float4(View_OneOverPreExposure.xxx, 1) * Local1).rgba,Local2,Local12);

	PixelMaterialInputs.EmissiveColor = Local13;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor = min16float3(0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Anisotropy = 0.00000000;
	PixelMaterialInputs.Normal = min16float3(0.00000000,0.00000000,1.00000000);
	PixelMaterialInputs.Tangent = min16float3(1.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction = 0;
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 0;
	PixelMaterialInputs.FrontMaterial = GetInitialisedStrataData();
	PixelMaterialInputs.SurfaceThickness = 0.01000000;
	PixelMaterialInputs.Displacement = 0.00000000;





	Parameters.WorldTangent = 0;

}

#line 3365
void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float ArgCos = dot(floor(SvPosition.xy), float2(347.83451793, 3343.28371963));

		
		ArgCos = fmod(ArgCos, 10000);

		float RandCos = cos(ArgCos);
		float RandomVal = frac(RandCos * 1000.0);
		min16float RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

#line 3383
void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}

#line 3752 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}

#line 3755 "/Engine/Generated/Material.ush"
void ClipLODTransition(float2 SvPosition)
{
}

#line 3786 "/Engine/Generated/Material.ush"
void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);

#line 3814 "/Engine/Generated/Material.ush"

}

#line 3885 "/Engine/Generated/Material.ush"
bool IsOrthoProjection(ViewState InView)
{
	return InView.ViewToClip[3][3] >= 1.0f;
}

#line 3891 "/Engine/Generated/Material.ush"
void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{
	
	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = LWCSubtract(TranslatedWorldPosition.xyz, ResolvedView.PreViewTranslation);

	
	





	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;
	Parameters.ViewBufferUV = ScreenPositionToBufferUV(ScreenPosition);

	
	


		if (IsOrthoProjection(ResolvedView))
		{
			
			Parameters.CameraVector = -ResolvedView.ViewForward;
		}
		else
		{
			
			Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
		}
	

	Parameters.LightVector = 0;







	Parameters.TwoSidedSign = 1.0f;



























	{
		CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
	}
}

#line 3999 "/Engine/Generated/Material.ush"
min16float3x3 AssembleTangentToWorld( min16float3 TangentToWorld0, min16float4 TangentToWorld2 )
{
	
	

	
	
	min16float3 TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;
	
	return min16float3x3(TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}

#line 4080 "/Engine/Generated/Material.ush"
float3 GetWorldBentNormalZero(in FMaterialPixelParameters MaterialParameters)
{







	return MaterialParameters.WorldNormal;

}

#line 121 "/Engine/Private/BasePassCommon.ush"
struct FShadingOcclusion
{
	min16float  DiffOcclusion;
	min16float  SpecOcclusion;
	min16float3 BentNormal;
};

#line 218 "/Engine/Private/BasePassCommon.ush"
FShadingOcclusion ApplyBentNormal(
	in min16float3 CameraVector, 
	in min16float3 WorldNormal, 
	in float3 WorldBentNormal0, 
	in min16float Roughness,
	in min16float MaterialAO)
{
	FShadingOcclusion Out;
	Out.DiffOcclusion = MaterialAO;
	Out.SpecOcclusion = MaterialAO;
	Out.BentNormal    = WorldNormal;

#line 253 "/Engine/Private/BasePassCommon.ush"

	return Out;
}

#line 27 "/Engine/Private/MobileBasePassCommon.ush"
struct FSharedMobileBasePassInterpolants
{




	float4 PixelPosition	: TEXCOORD8; 



















};

#line 7 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	min16float4 TangentToWorld0 : TEXCOORD10; min16float4 TangentToWorld2 : TEXCOORD11;























#line  45 "/Engine/Private/LocalVertexFactoryCommon.ush"





















};

#line 89 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

#line 135 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

#line 140 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

#line 154 "/Engine/Private/LocalVertexFactoryCommon.ush"
uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

#line 467 "/Engine/Private/ShaderPrintCommon.ush"
// Hashes are computed using the CityHash32 function

#line 516 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();















	min16float3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	min16float4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);

	
	Result.Particle.Color = min16float4(1,1,1,1);




	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );















	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);





























	return Result;
}

#line 294 "/Engine/Private/LightmapCommon.ush"
min16float4 GetPrimaryPrecomputedShadowMask(float LightmapVTPageTableResult, FVertexFactoryInterpolantsVSToPS Interpolants, FMaterialPixelParameters MaterialParameters)
{
	
#line 320 "/Engine/Private/LightmapCommon.ush"

		






	

	return 1.0f;
}

#line 651 "/Engine/Private/BRDF.ush"
min16float2 EnvBRDFApproxLazarov(min16float Roughness, min16float NoV)
{
	
	
	const min16float4 c0 = { -1, -0.0275, -0.572, 0.022 };
	const min16float4 c1 = { 1, 0.0425, 1.04, -0.04 };
	min16float4 r = Roughness * c0 + c1;
	min16float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;
	min16float2 AB = min16float2(-1.04, 1.04) * a004 + r.zw;
	return AB;
}

#line 680 "/Engine/Private/BRDF.ush"
min16float EnvBRDFApproxNonmetal( min16float Roughness, min16float NoV )
{
	
	const min16float2 c0 = { -1, -0.0275 };
	const min16float2 c1 = { 1, 0.0425 };
	min16float2 r = Roughness * c0 + c1;
	return min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;
}

#line 78 "/Engine/Private/ColorSpace.ush"
float3 Luminance( float3 LinearColor, float3 LuminanceFactors )
{
	return dot( LinearColor, LuminanceFactors );
}

#line 63 "/Engine/Private/ShadingModels.ush"
min16float3 GetEnvBRDF(min16float3 SpecularColor, min16float Roughness, min16float NoV)
{





	
	
	
	return EnvBRDFApproxNonmetal(Roughness, NoV).xxx;



}

#line 22 "/Engine/Private/ReflectionEnvironmentShared.ush"
min16float ComputeReflectionCaptureMipFromRoughness(min16float Roughness, min16float CubemapMaxMip)
{
	
	
	
	min16float LevelFrom1x1 = 1 - 1.2 * log2(max(Roughness, 0.001));
	return CubemapMaxMip - 1 - LevelFrom1x1;
}

#line 121 "/Engine/Private/ReflectionEnvironmentShared.ush"
min16float3 GetOffSpecularPeakReflectionDir(min16float3 Normal, min16float3 ReflectionVector, min16float Roughness)
{
	min16float a = Roughness * Roughness;
	return lerp( Normal, ReflectionVector, (1 - a) * ( sqrt(1 - a) + a ) );	
}

#line 127 "/Engine/Private/ReflectionEnvironmentShared.ush"
min16float GetSpecularOcclusion(min16float NoV, min16float RoughnessSq, min16float AO)
{
	return saturate( pow( NoV + AO, RoughnessSq ) - 1 + AO );
}

#line 199 "/Engine/Private/ReflectionEnvironmentShared.ush"
min16float ComputeMixingWeight(min16float IndirectIrradiance, min16float AverageBrightness, min16float Roughness)
{
	
	min16float MixingAlpha = smoothstep(0, 1, saturate(Roughness * View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.x + View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.y));

	
	
	
	
	min16float MixingWeight = IndirectIrradiance / max(AverageBrightness, .0001f);

	MixingWeight = min(MixingWeight, View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.z);

	return lerp(1.0f, MixingWeight, MixingAlpha);
}

#line 45 "/Engine/Private/LightGridCommon.ush"
struct FLightGridData
{
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	int3 CulledGridSize;
};

#line 52 "/Engine/Private/LightGridCommon.ush"
FLightGridData GetLightGridData(uint EyeIndex)
{
	FLightGridData Result;







		Result.LightGridPixelSizeShift = MobileBasePass_Forward_LightGridPixelSizeShift;
		Result.LightGridZParams = MobileBasePass_Forward_LightGridZParams;
		Result.CulledGridSize = MobileBasePass_Forward_CulledGridSize;











	return Result;
}

#line 79 "/Engine/Private/LightGridCommon.ush"
uint3 ComputeLightGridCellCoordinate(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData(EyeIndex);
	uint ZSlice = (uint)(max(0, log2(SceneDepth * GridData.LightGridZParams.x + GridData.LightGridZParams.y) * GridData.LightGridZParams.z));
	ZSlice = min(ZSlice, (uint)(GridData.CulledGridSize.z - 1));
	return uint3(PixelPos >> GridData.LightGridPixelSizeShift, ZSlice);
}

#line 87 "/Engine/Private/LightGridCommon.ush"
uint ComputeLightGridCellIndex(uint3 GridCoordinate, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData(EyeIndex);
	return (GridCoordinate.z * GridData.CulledGridSize.y + GridCoordinate.y) * GridData.CulledGridSize.x + GridCoordinate.x;
}

#line 93 "/Engine/Private/LightGridCommon.ush"
uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	return ComputeLightGridCellIndex(ComputeLightGridCellCoordinate(PixelPos, SceneDepth, EyeIndex), EyeIndex);
}

#line 98 "/Engine/Private/LightGridCommon.ush"
uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth)
{
	return ComputeLightGridCellIndex(PixelPos, SceneDepth, 0);
}

#line 21 "/Engine/Private/ClearCoatCommon.ush"
void RemapClearCoatDiffuseAndSpecularColor(FGBufferData GBuffer, min16float NoV, inout min16float3 DiffuseColor, inout min16float3 SpecularColor)
{
	if (GBuffer.ShadingModelID == 4)
	{
		
		min16float RefractionScale = ((NoV * 0.5 + 0.5) * NoV - 1) * saturate(1.25 - 1.25 * GBuffer.Roughness) + 1;

		min16float MetalSpec = 0.9;
		min16float3 AbsorptionColor = GBuffer.BaseColor * (1 / MetalSpec);
		min16float3 Absorption = AbsorptionColor * ((NoV - 1) * 0.85 * (1 - lerp(AbsorptionColor, Square(AbsorptionColor), -0.78)) + 1);

		min16float F0 = 0.04;
		min16float Fc = Pow5(1 - NoV);
		min16float F = Fc + (1 - Fc) * F0;
		min16float ClearCoat = GBuffer.CustomData.x;
		min16float LayerAttenuation = lerp(1, (1 - F), ClearCoat);

		min16float3 BaseColor = lerp(GBuffer.BaseColor * LayerAttenuation, MetalSpec * Absorption * RefractionScale, GBuffer.Metallic * ClearCoat);
		
		DiffuseColor = BaseColor - BaseColor * GBuffer.Metallic;

		min16float Specular = lerp(GBuffer.Specular, RefractionScale, ClearCoat);
		SpecularColor = ComputeF0(Specular, BaseColor, GBuffer.Metallic) * View_SpecularOverrideParameter.w + View_SpecularOverrideParameter.xyz;
	}
}

#line 47 "/Engine/Private/ClearCoatCommon.ush"
void RemapClearCoatDiffuseAndSpecularColor(FGBufferData GBuffer, float2 ScreenPosition, inout float3 DiffuseColor, inout float3 SpecularColor)
{
	if (GBuffer.ShadingModelID == 4)
	{
		float3 TranslatedWorldPosition = mul(float4(ScreenPosition * GBuffer.Depth, GBuffer.Depth, 1), View_ScreenToTranslatedWorld).xyz;
		float3 CameraToPixel = normalize(TranslatedWorldPosition - GetPrimaryView().TranslatedWorldCameraOrigin);
		float3 V = -CameraToPixel;
		float NoV = saturate(dot(GBuffer.WorldNormal, V));

		RemapClearCoatDiffuseAndSpecularColor(GBuffer, NoV, DiffuseColor, SpecularColor);
	}
}

#line 307 "/Engine/Private/MobileLightingCommon.ush"
min16float3 GetMobileSkyLightReflection(min16float3 ReflectionVector, min16float Roughness, min16float CubemapMaxMip)
{
	min16float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(Roughness, CubemapMaxMip);
	min16float4 Reflection = MobileReflectionCapture_Texture.SampleLevel(MobileReflectionCapture_TextureSampler, ReflectionVector, AbsoluteSpecularMip);
	return Reflection.rgb * ResolvedView.SkyLightColor.rgb;
}

#line 316 "/Engine/Private/MobileLightingCommon.ush"
min16float3 GetImageBasedReflectionLighting_Mobile(
	min16float3 ReflectionVector, 
	float3 TranslatedWorldPosition, 
	min16float Roughness, 
	min16float IndirectIrradiance, 
	min16float CompositeAlpha, 
	uint GridIndex)
{
	min16float3 SpecularIBL = (min16float3)0.0f;

#line 354 "/Engine/Private/MobileLightingCommon.ush"


	min16float UsingSkyReflection = MobileReflectionCapture_Params.y > 0.0f;
	if (UsingSkyReflection)
	{
		
		SpecularIBL = GetMobileSkyLightReflection(ReflectionVector, Roughness, MobileReflectionCapture_Params.y);
	}
	else
	{
		min16float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(Roughness, ResolvedView.ReflectionCubemapMaxMip);
		SpecularIBL = MobileReflectionCapture_Texture.SampleLevel(MobileReflectionCapture_TextureSampler, ReflectionVector, AbsoluteSpecularMip).rgb;

		min16float ReflectionCaptureBrightness = MobileReflectionCapture_Params.w;
		SpecularIBL = SpecularIBL * ReflectionCaptureBrightness;
	}

	
	SpecularIBL *= ComputeMixingWeight(IndirectIrradiance, MobileReflectionCapture_Params.x, Roughness);
	

	SpecularIBL *= CompositeAlpha;


	return SpecularIBL;
}

#line 382 "/Engine/Private/MobileLightingCommon.ush"
min16float3 GetPlanarReflectionbasedReflectionLighting_Mobile(float3 TranslatedWorldPosition, min16float3 WorldNormal, min16float Roughness, min16float3 InSpecularIBL)
{
	min16float3 Out = InSpecularIBL;









	return Out;
}

#line 425 "/Engine/Private/MobileLightingCommon.ush"
void AccumulateReflection(
	FGBufferData GBuffer, 
	min16float3 CameraVector, 
	float3 TranslatedWorldPosition, 
	min16float3 ReflectionVector, 
	min16float IndirectIrradiance, 
	uint GridIndex, 
	inout FLightAccumulator DirectLighting)
{
	min16float3 SpecularIBLLighting = (min16float3)0.0f;

	min16float3 N = GBuffer.WorldNormal;
	min16float3 V = -CameraVector;
	min16float NoV = saturate(abs(dot(N, V)) + 1e-5);

	min16float3 TopLayerR = ReflectionVector;
	min16float SpecularOcclusion = GBuffer.GBufferAO;
	if (0)
	{
		
		ReflectionVector = GetOffSpecularPeakReflectionDir(N, ReflectionVector, GBuffer.Roughness);

		min16float RoughnessSq = GBuffer.Roughness * GBuffer.Roughness;
		SpecularOcclusion = GetSpecularOcclusion(NoV, RoughnessSq, SpecularOcclusion);
	}

	
	min16float3 SpecularIBL = GetImageBasedReflectionLighting_Mobile(ReflectionVector
		, TranslatedWorldPosition
		, GBuffer.Roughness
		, IndirectIrradiance
		, SpecularOcclusion
		, GridIndex
	);

	
	SpecularIBL = GetPlanarReflectionbasedReflectionLighting_Mobile(TranslatedWorldPosition, GBuffer.WorldNormal, GBuffer.Roughness, SpecularIBL);

	min16float3 DiffuseColor = GBuffer.DiffuseColor;
	min16float3 SpecularColor = GBuffer.SpecularColor;

	if (GBuffer.ShadingModelID == 4)
	{
		const min16float ClearCoat = GBuffer.CustomData.x;
		const min16float ClearCoatRoughness = GBuffer.CustomData.y;

		RemapClearCoatDiffuseAndSpecularColor(GBuffer, NoV, DiffuseColor, SpecularColor);

		min16float F = GetEnvBRDF(0.04, ClearCoatRoughness, NoV).x;
		F *= ClearCoat;
		min16float LayerAttenuation = (1 - F);

		
	


		min16float2 AB = EnvBRDFApproxLazarov(GBuffer.Roughness, NoV);
	
		SpecularIBLLighting += SpecularIBL * LayerAttenuation * (SpecularColor * AB.x + AB.y * saturate(50 * SpecularColor.g) * (1 - ClearCoat));

		
		SpecularIBL = GetImageBasedReflectionLighting_Mobile(TopLayerR
			, TranslatedWorldPosition
			, ClearCoatRoughness
			, IndirectIrradiance
			, F * SpecularOcclusion
			, GridIndex
		);
		SpecularIBLLighting += SpecularIBL;
	}
	else if (GBuffer.ShadingModelID == 7)
	{
		
	}
	else
	{
		SpecularIBLLighting += SpecularIBL * GetEnvBRDF(SpecularColor, GBuffer.Roughness, NoV);
	}
	LightAccumulator_AddSplit(DirectLighting, 0.0f, SpecularIBLLighting, 0.0f, 1.0f, false);
}

#line 12 "/Engine/Private/ShadingModelsMaterial.ush"
void SetGBufferForShadingModel(
	in out FGBufferData GBuffer, 
	in out FMaterialPixelParameters MaterialParameters,
	const float Opacity,
	const min16float3 BaseColor,
	const min16float  Metallic,
	const min16float  Specular,
	const float Roughness,
	const float Anisotropy,
	const float3 SubsurfaceColor,
	const float SubsurfaceProfile,
	const float Dither,
	const uint ShadingModel)
{
	GBuffer.WorldNormal = MaterialParameters.WorldNormal;
	GBuffer.WorldTangent = MaterialParameters.WorldTangent;
	GBuffer.BaseColor = BaseColor;
	GBuffer.Metallic = Metallic;
	GBuffer.Specular = Specular;
	GBuffer.Roughness = Roughness;
	GBuffer.Anisotropy = Anisotropy;
	GBuffer.ShadingModelID = ShadingModel;

	
	
	
	if (false)
	{
	}














#line  84 "/Engine/Private/ShadingModelsMaterial.ush"

#line 118 "/Engine/Private/ShadingModelsMaterial.ush"























#line 203 "/Engine/Private/ShadingModelsMaterial.ush"

}

#line 175 "/Engine/Private/MobileBasePassPixelShader.usf"
void GetSkyLighting(min16float3 SkyLightColor, min16float3 WorldNormal, bool bEvaluateBackface, out min16float3 OutSkyDiffuseLighting, out min16float3 OutSkySubsurfaceLighting, out min16float3 OutWaterDiffuseIndirectLuminance)
{
	OutSkyDiffuseLighting = 0;
	OutSkySubsurfaceLighting = 0;
	OutWaterDiffuseIndirectLuminance = 0;

#line 197 "/Engine/Private/MobileBasePassPixelShader.usf"

}

#line 200 "/Engine/Private/MobileBasePassPixelShader.usf"
void GetPrecomputedIndirectLightingAndSkyLight(float LightmapVTPageTableResult, FVertexFactoryInterpolantsVSToPS Interpolants, bool bEvaluateBackface, min16float3 DiffuseDir, min16float3 SkyLightColor, out min16float3 OutDiffuseIndirectLighting, out min16float3 OutSubsurfaceIndirectLighting, out min16float OutIndirectIrradiance, out min16float3 OutWaterDiffuseIndirectLuminance)
{
	
	OutIndirectIrradiance = 0;
	OutDiffuseIndirectLighting = 0;
	OutSubsurfaceIndirectLighting = 0;

	
#line 255 "/Engine/Private/MobileBasePassPixelShader.usf"


	
	OutDiffuseIndirectLighting *= View_PrecomputedIndirectLightingColorScale;
	OutSubsurfaceIndirectLighting *= View_PrecomputedIndirectLightingColorScale;

	min16float3 SkyDiffuseLighting;
	min16float3 SkySubsurfaceLighting;
	GetSkyLighting(SkyLightColor, DiffuseDir, bEvaluateBackface, SkyDiffuseLighting, SkySubsurfaceLighting, OutWaterDiffuseIndirectLuminance);

	OutDiffuseIndirectLighting += SkyDiffuseLighting;
	OutSubsurfaceIndirectLighting += SkySubsurfaceLighting;




}

#line 274 "/Engine/Private/MobileBasePassPixelShader.usf"
void Main( 
	FVertexFactoryInterpolantsVSToPS Interpolants
	, FSharedMobileBasePassInterpolants BasePassInterpolants
	, in float4 SvPosition : SV_Position
	, in bool bIsFrontFace : SV_IsFrontFace
#line 291 "/Engine/Private/MobileBasePassPixelShader.usf"

	



	, out min16float4 OutColor : SV_Target0
	


	, out float OutSceneDepthAux : SV_Target1




	)
{  












	ResolvedView = ResolveView();











	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;
	{
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
		float3 WorldPosition = BasePassInterpolants.PixelPosition.xyz;
		float3 WorldPositionExcludingWPO = BasePassInterpolants.PixelPosition.xyz;
		


		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, WorldPosition, WorldPositionExcludingWPO);






	}




	  

	
	GetMaterialCoverageAndClipping(MaterialParameters, PixelMaterialInputs);


	min16float MaterialAO = GetMaterialAmbientOcclusion(PixelMaterialInputs);







	min16float Opacity = GetMaterialOpacity(PixelMaterialInputs);
	

	
	min16float3 BaseColor = GetMaterialBaseColor(PixelMaterialInputs);
	min16float Metallic = GetMaterialMetallic(PixelMaterialInputs);
	min16float Specular = GetMaterialSpecular(PixelMaterialInputs);
	
	
	
	
	
	
	
	min16float Roughness = max(0.015625f, GetMaterialRoughness(PixelMaterialInputs));
	min16float Anisotropy = GetMaterialAnisotropy(PixelMaterialInputs);
	uint ShadingModelID = GetMaterialShadingModel(PixelMaterialInputs);
	
	
	float3 SubsurfaceColor = 0;
	
	float SubsurfaceProfile = 0;

	
#line 405 "/Engine/Private/MobileBasePassPixelShader.usf"













#line 436 "/Engine/Private/MobileBasePassPixelShader.usf"



	const min16float BaseMaterialCoverageOverWater = Opacity;
	const min16float WaterVisibility = 1.0 - BaseMaterialCoverageOverWater;
	
	
	min16float3 WaterDiffuseIndirectLuminance = 0;

	FGBufferData GBuffer = (FGBufferData)0;
	GBuffer.GBufferAO = MaterialAO;
	GBuffer.Depth = MaterialParameters.ScreenPosition.w;

	SetGBufferForShadingModel(
		GBuffer,
		MaterialParameters,
		Opacity,
		BaseColor,
		Metallic,
		Specular,
		Roughness,
		Anisotropy,
		SubsurfaceColor,
		SubsurfaceProfile,
		0.0f,
		ShadingModelID
	);

	GBuffer.StoredBaseColor = GBuffer.BaseColor;
	GBuffer.StoredMetallic = GBuffer.Metallic;
	GBuffer.StoredSpecular = GBuffer.Specular;












	GBuffer.DiffuseColor = GBuffer.BaseColor;
	GBuffer.SpecularColor = 0.04;

















#line 514 "/Engine/Private/MobileBasePassPixelShader.usf"


	min16float3 InputBentNormal = MaterialParameters.WorldNormal;

	
	







	const FShadingOcclusion ShadingOcclusion = ApplyBentNormal(MaterialParameters.CameraVector, InputBentNormal, GetWorldBentNormalZero(MaterialParameters), GBuffer.Roughness, GBuffer.GBufferAO);







	float LightmapVTPageTableResult = (float)0.0f;















#line 726 "/Engine/Private/MobileBasePassPixelShader.usf"


	min16float IndirectIrradiance = 0;
	min16float3 DiffuseIndirectLighting = 0;
	min16float3 SubsurfaceIndirectLighting = 0;

	min16float3 DiffuseColorForIndirect = GBuffer.DiffuseColor;
	min16float3 DiffuseDir = ShadingOcclusion.BentNormal;


























	min16float NoL = max(0, dot(GBuffer.WorldNormal, MobileDirectionalLight_DirectionalLightDirectionAndShadowTransition.xyz));

	const bool bEvaluateBackface = GetShadingModelRequiresBackfaceLighting(GBuffer.ShadingModelID);

	GetPrecomputedIndirectLightingAndSkyLight(LightmapVTPageTableResult, Interpolants, bEvaluateBackface, DiffuseDir, ResolvedView.SkyLightColor.rgb, DiffuseIndirectLighting, SubsurfaceIndirectLighting, IndirectIrradiance, WaterDiffuseIndirectLuminance);

	
	IndirectIrradiance *= GBuffer.GBufferAO;

	min16float3 DiffuseColor = (DiffuseIndirectLighting * DiffuseColorForIndirect + SubsurfaceIndirectLighting * SubsurfaceColor) * AOMultiBounce(GBuffer.BaseColor, ShadingOcclusion.DiffOcclusion);









	FLightAccumulator DirectLighting = (FLightAccumulator)0;
	LightAccumulator_AddSplit(DirectLighting, DiffuseColor, 0.0f, DiffuseColor, 1.0f, false);

	GBuffer.PrecomputedShadowFactors = GetPrimaryPrecomputedShadowMask(LightmapVTPageTableResult, Interpolants, MaterialParameters);






	min16float3 CameraVector = -MaterialParameters.CameraVector;

	min16float4 DynamicShadowFactors = 1.0f;
	float DirectionalLightShadow = 1.0f;

	




	float2 LocalPosition = SvPosition.xy - ResolvedView.ViewRectMin.xy;
	uint GridIndex = ComputeLightGridCellIndex(uint2(LocalPosition.x, LocalPosition.y), SvPosition.w);


	
	AccumulateReflection(GBuffer
		, CameraVector
		, MaterialParameters.WorldPosition_CamRelative
		, MaterialParameters.ReflectionVector
		, IndirectIrradiance
		, GridIndex
		, DirectLighting);


	
#line 857 "/Engine/Private/MobileBasePassPixelShader.usf"


#line 885 "/Engine/Private/MobileBasePassPixelShader.usf"












	min16float3 Color = 0.0f;


	min16float4 VertexFog = min16float4(0, 0, 0, 1);








	
				 
	min16float3 Emissive = GetMaterialEmissive(PixelMaterialInputs);

	Color += Emissive;





#line 938 "/Engine/Private/MobileBasePassPixelShader.usf"

	
	
	
#line 969 "/Engine/Private/MobileBasePassPixelShader.usf"

		OutColor.rgb = Color * VertexFog.a + VertexFog.rgb;

		
			
			OutColor.a = 0.0;
		




	



	OutSceneDepthAux = SvPosition.z;



	OutColor.rgb *= ResolvedView.PreExposure;
















	


















}



#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 376963194
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 450888449
MobileReflectionCapture, 2425088
InstanceVF, 104204038
SingleLayerWater, 1641252
PrimitiveDither, 1048832
PrimitiveFade, 1048832
DeferredDecal, 2097668
SceneTexturesStruct, 158338568
MobileSceneTextures, 147131313
Primitive, 50331904
Scene, 273683233
InstanceCulling, 3146265
SpeedTreeData, 39846144
Atmosphere, 11534592
BlueNoise, 3473677
OpaqueBasePass, 159911720
BasePass, 148439296
MobileBasePass, 118234733
TranslucentBasePass, 274269473
LightmapResourceCluster, 226692878
PrecomputedLightingBuffer, 15728896
IndirectLightingCache, 69011717
MobileDirectionalLight, 24445232
ForwardLightData, 466097176
ReflectionStruct, 206569728
PlanarReflectionStruct, 22348032
ReflectionCaptureES31, 943719169
ReflectionCaptureSM5, -1076886783
VirtualShadowMap, 277877352
DeferredLightUniforms, 10486016
ShaderPrintData, 5243136
LocalVFLooseParameters, 2490654
LocalVF, 105252632
InstancedVFLooseParameters, 6291712
Material, 2621696
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_GlobalDistanceFieldPageAtlasTextureSampler, View, 8, 25
View_GlobalDistanceFieldCoverageAtlasTextureSampler, View, 8, 26
View_GlobalDistanceFieldMipTextureSampler, View, 8, 27
View_AtmosphereTransmittanceTexture, View, 5, 28
View_AtmosphereTransmittanceTextureSampler, View, 8, 29
View_AtmosphereIrradianceTexture, View, 5, 30
View_AtmosphereIrradianceTextureSampler, View, 8, 31
View_AtmosphereInscatterTexture, View, 5, 32
View_AtmosphereInscatterTextureSampler, View, 8, 33
View_PerlinNoiseGradientTexture, View, 5, 34
View_PerlinNoiseGradientTextureSampler, View, 8, 35
View_PerlinNoise3DTexture, View, 5, 36
View_PerlinNoise3DTextureSampler, View, 8, 37
View_SobolSamplingTexture, View, 5, 38
View_SharedPointWrappedSampler, View, 8, 39
View_SharedPointClampedSampler, View, 8, 40
View_SharedBilinearWrappedSampler, View, 8, 41
View_SharedBilinearClampedSampler, View, 8, 42
View_SharedBilinearAnisoClampedSampler, View, 8, 43
View_SharedTrilinearWrappedSampler, View, 8, 44
View_SharedTrilinearClampedSampler, View, 8, 45
View_PreIntegratedBRDF, View, 5, 46
View_PreIntegratedBRDFSampler, View, 8, 47
View_SkyIrradianceEnvironmentMap, View, 6, 48
View_TransmittanceLutTexture, View, 5, 49
View_TransmittanceLutTextureSampler, View, 8, 50
View_SkyViewLutTexture, View, 5, 51
View_SkyViewLutTextureSampler, View, 8, 52
View_DistantSkyLightLutTexture, View, 5, 53
View_DistantSkyLightLutTextureSampler, View, 8, 54
View_CameraAerialPerspectiveVolume, View, 5, 55
View_CameraAerialPerspectiveVolumeSampler, View, 8, 56
View_CameraAerialPerspectiveVolumeMieOnly, View, 5, 57
View_CameraAerialPerspectiveVolumeMieOnlySampler, View, 8, 58
View_CameraAerialPerspectiveVolumeRayOnly, View, 5, 59
View_CameraAerialPerspectiveVolumeRayOnlySampler, View, 8, 60
View_HairScatteringLUTTexture, View, 5, 61
View_HairScatteringLUTSampler, View, 8, 62
View_GGXLTCMatTexture, View, 5, 63
View_GGXLTCMatSampler, View, 8, 64
View_GGXLTCAmpTexture, View, 5, 65
View_GGXLTCAmpSampler, View, 8, 66
View_SheenLTCTexture, View, 5, 67
View_SheenLTCSampler, View, 8, 68
View_ShadingEnergyGGXSpecTexture, View, 5, 69
View_ShadingEnergyGGXGlassTexture, View, 5, 70
View_ShadingEnergyClothSpecTexture, View, 5, 71
View_ShadingEnergyDiffuseTexture, View, 5, 72
View_ShadingEnergySampler, View, 8, 73
View_GlintTexture, View, 5, 74
View_GlintSampler, View, 8, 75
View_SimpleVolumeTexture, View, 5, 76
View_SimpleVolumeTextureSampler, View, 8, 77
View_SimpleVolumeEnvTexture, View, 5, 78
View_SimpleVolumeEnvTextureSampler, View, 8, 79
View_SSProfilesTexture, View, 5, 80
View_SSProfilesSampler, View, 8, 81
View_SSProfilesTransmissionSampler, View, 8, 82
View_SSProfilesPreIntegratedTexture, View, 5, 83
View_SSProfilesPreIntegratedSampler, View, 8, 84
View_SpecularProfileTexture, View, 5, 85
View_SpecularProfileSampler, View, 8, 86
View_WaterIndirection, View, 6, 87
View_WaterData, View, 6, 88
View_RectLightAtlasTexture, View, 5, 89
View_RectLightAtlasSampler, View, 8, 90
View_IESAtlasTexture, View, 5, 91
View_IESAtlasSampler, View, 8, 92
View_LandscapeWeightmapSampler, View, 8, 93
View_LandscapeIndirection, View, 6, 94
View_LandscapePerComponentData, View, 6, 95
View_VTFeedbackBuffer, View, 7, 96
View_PhysicsFieldClipmapBuffer, View, 6, 97
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
MobileReflectionCapture_Texture, MobileReflectionCapture, 5, 0
MobileReflectionCapture_TextureSampler, MobileReflectionCapture, 8, 1
InstanceVF_VertexFetch_InstanceOriginBuffer, InstanceVF, 6, 0
InstanceVF_VertexFetch_InstanceTransformBuffer, InstanceVF, 6, 1
InstanceVF_VertexFetch_InstanceLightmapBuffer, InstanceVF, 6, 2
InstanceVF_InstanceCustomDataBuffer, InstanceVF, 6, 3
SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 0
SingleLayerWater_SceneColorWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 1
SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 2
SingleLayerWater_SceneDepthWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 3
SingleLayerWater_CustomDepthTexture, SingleLayerWater, 9, 4
SingleLayerWater_CustomStencilTexture, SingleLayerWater, 12, 5
SingleLayerWater_CustomDepthSampler, SingleLayerWater, 8, 6
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTexture, SingleLayerWater, 9, 7
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapSampler, SingleLayerWater, 8, 8
SingleLayerWater_BlueNoise_ScalarTexture, SingleLayerWater, 5, 9
SingleLayerWater_BlueNoise_Vec2Texture, SingleLayerWater, 5, 10
DeferredDecal_PreviousFrameNormal, DeferredDecal, 5, 0
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_ScenePartialDepthTexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 11
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 12
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 13
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_ScenePartialDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_ScenePartialDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 6
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 7
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 8
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 9
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 10
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 14
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 15
MobileSceneTextures_LocalLightTextureA, MobileSceneTextures, 9, 16
MobileSceneTextures_LocalLightTextureB, MobileSceneTextures, 9, 17
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 18
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 19
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 20
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 21
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 22
Scene_GPUScene_GPUSceneInstanceSceneData, Scene, 16, 0
Scene_GPUScene_GPUSceneInstancePayloadData, Scene, 16, 1
Scene_GPUScene_GPUScenePrimitiveSceneData, Scene, 16, 2
Scene_GPUScene_GPUSceneLightmapData, Scene, 16, 3
Scene_GPUScene_GPUSceneLightData, Scene, 16, 4
InstanceCulling_InstanceIdsBuffer, InstanceCulling, 16, 0
InstanceCulling_PageInfoBuffer, InstanceCulling, 16, 1
BlueNoise_ScalarTexture, BlueNoise, 5, 0
BlueNoise_Vec2Texture, BlueNoise, 5, 1
OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 0
OpaqueBasePass_Shared_Forward_ShadowmapSampler, OpaqueBasePass, 8, 1
OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 2
OpaqueBasePass_Shared_Forward_StaticShadowmapSampler, OpaqueBasePass, 8, 3
OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer, OpaqueBasePass, 16, 4
OpaqueBasePass_Shared_Forward_NumCulledLightsGrid, OpaqueBasePass, 16, 5
OpaqueBasePass_Shared_Forward_CulledLightDataGrid32Bit, OpaqueBasePass, 16, 6
OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit, OpaqueBasePass, 16, 7
OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 8
OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler, OpaqueBasePass, 8, 9
OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 10
OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler, OpaqueBasePass, 8, 11
OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, OpaqueBasePass, 16, 12
OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid, OpaqueBasePass, 16, 13
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit, OpaqueBasePass, 16, 14
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit, OpaqueBasePass, 16, 15
OpaqueBasePass_Shared_Reflection_SkyLightCubemap, OpaqueBasePass, 9, 16
OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler, OpaqueBasePass, 8, 17
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, OpaqueBasePass, 5, 18
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, OpaqueBasePass, 8, 19
OpaqueBasePass_Shared_Reflection_ReflectionCubemap, OpaqueBasePass, 5, 20
OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler, OpaqueBasePass, 8, 21
OpaqueBasePass_Shared_Reflection_PreIntegratedGF, OpaqueBasePass, 5, 22
OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler, OpaqueBasePass, 8, 23
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture, OpaqueBasePass, 5, 24
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler, OpaqueBasePass, 8, 25
OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap, OpaqueBasePass, 5, 26
OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler, OpaqueBasePass, 8, 27
OpaqueBasePass_Shared_Fog_IntegratedLightScattering, OpaqueBasePass, 9, 28
OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 29
OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap, OpaqueBasePass, 5, 30
OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler, OpaqueBasePass, 8, 31
OpaqueBasePass_Shared_FogISR_IntegratedLightScattering, OpaqueBasePass, 9, 32
OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 33
OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs, OpaqueBasePass, 13, 34
OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV, OpaqueBasePass, 13, 35
OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture, OpaqueBasePass, 9, 36
OpaqueBasePass_IndirectOcclusionTexture, OpaqueBasePass, 9, 37
OpaqueBasePass_ResolvedSceneDepthTexture, OpaqueBasePass, 9, 38
OpaqueBasePass_DBufferATexture, OpaqueBasePass, 9, 39
OpaqueBasePass_DBufferBTexture, OpaqueBasePass, 9, 40
OpaqueBasePass_DBufferCTexture, OpaqueBasePass, 9, 41
OpaqueBasePass_DBufferRenderMask, OpaqueBasePass, 9, 42
OpaqueBasePass_DBufferATextureSampler, OpaqueBasePass, 8, 43
OpaqueBasePass_DBufferBTextureSampler, OpaqueBasePass, 8, 44
OpaqueBasePass_DBufferCTextureSampler, OpaqueBasePass, 8, 45
OpaqueBasePass_PreIntegratedGFTexture, OpaqueBasePass, 5, 46
OpaqueBasePass_PreIntegratedGFSampler, OpaqueBasePass, 8, 47
OpaqueBasePass_EyeAdaptationBuffer, OpaqueBasePass, 16, 48
BasePass_Forward_DirectionalLightShadowmapAtlas, BasePass, 9, 0
BasePass_Forward_ShadowmapSampler, BasePass, 8, 1
BasePass_Forward_DirectionalLightStaticShadowmap, BasePass, 5, 2
BasePass_Forward_StaticShadowmapSampler, BasePass, 8, 3
BasePass_Forward_ForwardLocalLightBuffer, BasePass, 16, 4
BasePass_Forward_NumCulledLightsGrid, BasePass, 16, 5
BasePass_Forward_CulledLightDataGrid32Bit, BasePass, 16, 6
BasePass_Forward_CulledLightDataGrid16Bit, BasePass, 16, 7
BasePass_ForwardISR_DirectionalLightShadowmapAtlas, BasePass, 9, 8
BasePass_ForwardISR_ShadowmapSampler, BasePass, 8, 9
BasePass_ForwardISR_DirectionalLightStaticShadowmap, BasePass, 5, 10
BasePass_ForwardISR_StaticShadowmapSampler, BasePass, 8, 11
BasePass_ForwardISR_ForwardLocalLightBuffer, BasePass, 16, 12
BasePass_ForwardISR_NumCulledLightsGrid, BasePass, 16, 13
BasePass_ForwardISR_CulledLightDataGrid32Bit, BasePass, 16, 14
BasePass_ForwardISR_CulledLightDataGrid16Bit, BasePass, 16, 15
BasePass_Reflection_SkyLightCubemap, BasePass, 9, 16
BasePass_Reflection_SkyLightCubemapSampler, BasePass, 8, 17
BasePass_Reflection_SkyLightBlendDestinationCubemap, BasePass, 5, 18
BasePass_Reflection_SkyLightBlendDestinationCubemapSampler, BasePass, 8, 19
BasePass_Reflection_ReflectionCubemap, BasePass, 5, 20
BasePass_Reflection_ReflectionCubemapSampler, BasePass, 8, 21
BasePass_Reflection_PreIntegratedGF, BasePass, 5, 22
BasePass_Reflection_PreIntegratedGFSampler, BasePass, 8, 23
BasePass_PlanarReflection_PlanarReflectionTexture, BasePass, 5, 24
BasePass_PlanarReflection_PlanarReflectionSampler, BasePass, 8, 25
BasePass_Fog_FogInscatteringColorCubemap, BasePass, 5, 26
BasePass_Fog_FogInscatteringColorSampler, BasePass, 8, 27
BasePass_Fog_IntegratedLightScattering, BasePass, 9, 28
BasePass_Fog_IntegratedLightScatteringSampler, BasePass, 8, 29
BasePass_FogISR_FogInscatteringColorCubemap, BasePass, 5, 30
BasePass_FogISR_FogInscatteringColorSampler, BasePass, 8, 31
BasePass_FogISR_IntegratedLightScattering, BasePass, 9, 32
BasePass_FogISR_IntegratedLightScatteringSampler, BasePass, 8, 33
MobileBasePass_Fog_FogInscatteringColorCubemap, MobileBasePass, 5, 0
MobileBasePass_Fog_FogInscatteringColorSampler, MobileBasePass, 8, 1
MobileBasePass_Fog_IntegratedLightScattering, MobileBasePass, 9, 2
MobileBasePass_Fog_IntegratedLightScatteringSampler, MobileBasePass, 8, 3
MobileBasePass_Forward_DirectionalLightShadowmapAtlas, MobileBasePass, 9, 4
MobileBasePass_Forward_ShadowmapSampler, MobileBasePass, 8, 5
MobileBasePass_Forward_DirectionalLightStaticShadowmap, MobileBasePass, 5, 6
MobileBasePass_Forward_StaticShadowmapSampler, MobileBasePass, 8, 7
MobileBasePass_Forward_ForwardLocalLightBuffer, MobileBasePass, 16, 8
MobileBasePass_Forward_NumCulledLightsGrid, MobileBasePass, 16, 9
MobileBasePass_Forward_CulledLightDataGrid32Bit, MobileBasePass, 16, 10
MobileBasePass_Forward_CulledLightDataGrid16Bit, MobileBasePass, 16, 11
MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlas, MobileBasePass, 9, 12
MobileBasePass_ForwardMMV_ShadowmapSampler, MobileBasePass, 8, 13
MobileBasePass_ForwardMMV_DirectionalLightStaticShadowmap, MobileBasePass, 5, 14
MobileBasePass_ForwardMMV_StaticShadowmapSampler, MobileBasePass, 8, 15
MobileBasePass_ForwardMMV_ForwardLocalLightBuffer, MobileBasePass, 16, 16
MobileBasePass_ForwardMMV_NumCulledLightsGrid, MobileBasePass, 16, 17
MobileBasePass_ForwardMMV_CulledLightDataGrid32Bit, MobileBasePass, 16, 18
MobileBasePass_ForwardMMV_CulledLightDataGrid16Bit, MobileBasePass, 16, 19
MobileBasePass_PlanarReflection_PlanarReflectionTexture, MobileBasePass, 5, 20
MobileBasePass_PlanarReflection_PlanarReflectionSampler, MobileBasePass, 8, 21
MobileBasePass_SceneTextures_SceneColorTexture, MobileBasePass, 9, 22
MobileBasePass_SceneTextures_SceneColorTextureSampler, MobileBasePass, 8, 23
MobileBasePass_SceneTextures_SceneDepthTexture, MobileBasePass, 9, 24
MobileBasePass_SceneTextures_SceneDepthTextureSampler, MobileBasePass, 8, 25
MobileBasePass_SceneTextures_ScenePartialDepthTexture, MobileBasePass, 9, 26
MobileBasePass_SceneTextures_ScenePartialDepthTextureSampler, MobileBasePass, 8, 27
MobileBasePass_SceneTextures_CustomDepthTexture, MobileBasePass, 9, 28
MobileBasePass_SceneTextures_CustomDepthTextureSampler, MobileBasePass, 8, 29
MobileBasePass_SceneTextures_CustomStencilTexture, MobileBasePass, 12, 30
MobileBasePass_SceneTextures_SceneVelocityTexture, MobileBasePass, 9, 31
MobileBasePass_SceneTextures_SceneVelocityTextureSampler, MobileBasePass, 8, 32
MobileBasePass_SceneTextures_GBufferATexture, MobileBasePass, 9, 33
MobileBasePass_SceneTextures_GBufferBTexture, MobileBasePass, 9, 34
MobileBasePass_SceneTextures_GBufferCTexture, MobileBasePass, 9, 35
MobileBasePass_SceneTextures_GBufferDTexture, MobileBasePass, 9, 36
MobileBasePass_SceneTextures_SceneDepthAuxTexture, MobileBasePass, 9, 37
MobileBasePass_SceneTextures_LocalLightTextureA, MobileBasePass, 9, 38
MobileBasePass_SceneTextures_LocalLightTextureB, MobileBasePass, 9, 39
MobileBasePass_SceneTextures_GBufferATextureSampler, MobileBasePass, 8, 40
MobileBasePass_SceneTextures_GBufferBTextureSampler, MobileBasePass, 8, 41
MobileBasePass_SceneTextures_GBufferCTextureSampler, MobileBasePass, 8, 42
MobileBasePass_SceneTextures_GBufferDTextureSampler, MobileBasePass, 8, 43
MobileBasePass_SceneTextures_SceneDepthAuxTextureSampler, MobileBasePass, 8, 44
MobileBasePass_QuadOverdraw, MobileBasePass, 13, 45
MobileBasePass_ReflectionsParameters_SkyLightCubemap, MobileBasePass, 9, 46
MobileBasePass_ReflectionsParameters_SkyLightCubemapSampler, MobileBasePass, 8, 47
MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemap, MobileBasePass, 5, 48
MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemapSampler, MobileBasePass, 8, 49
MobileBasePass_ReflectionsParameters_ReflectionCubemap, MobileBasePass, 5, 50
MobileBasePass_ReflectionsParameters_ReflectionCubemapSampler, MobileBasePass, 8, 51
MobileBasePass_ReflectionsParameters_PreIntegratedGF, MobileBasePass, 5, 52
MobileBasePass_ReflectionsParameters_PreIntegratedGFSampler, MobileBasePass, 8, 53
MobileBasePass_PreIntegratedGFTexture, MobileBasePass, 5, 54
MobileBasePass_PreIntegratedGFSampler, MobileBasePass, 8, 55
MobileBasePass_EyeAdaptationBuffer, MobileBasePass, 16, 56
MobileBasePass_RWOcclusionBufferUAV, MobileBasePass, 17, 57
MobileBasePass_AmbientOcclusionTexture, MobileBasePass, 9, 58
MobileBasePass_AmbientOcclusionSampler, MobileBasePass, 8, 59
MobileBasePass_ScreenSpaceShadowMaskTexture, MobileBasePass, 9, 60
MobileBasePass_ScreenSpaceShadowMaskSampler, MobileBasePass, 8, 61
TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 0
TranslucentBasePass_Shared_Forward_ShadowmapSampler, TranslucentBasePass, 8, 1
TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 2
TranslucentBasePass_Shared_Forward_StaticShadowmapSampler, TranslucentBasePass, 8, 3
TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer, TranslucentBasePass, 16, 4
TranslucentBasePass_Shared_Forward_NumCulledLightsGrid, TranslucentBasePass, 16, 5
TranslucentBasePass_Shared_Forward_CulledLightDataGrid32Bit, TranslucentBasePass, 16, 6
TranslucentBasePass_Shared_Forward_CulledLightDataGrid16Bit, TranslucentBasePass, 16, 7
TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 8
TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler, TranslucentBasePass, 8, 9
TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 10
TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler, TranslucentBasePass, 8, 11
TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, TranslucentBasePass, 16, 12
TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid, TranslucentBasePass, 16, 13
TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit, TranslucentBasePass, 16, 14
TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit, TranslucentBasePass, 16, 15
TranslucentBasePass_Shared_Reflection_SkyLightCubemap, TranslucentBasePass, 9, 16
TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler, TranslucentBasePass, 8, 17
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, TranslucentBasePass, 5, 18
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, TranslucentBasePass, 8, 19
TranslucentBasePass_Shared_Reflection_ReflectionCubemap, TranslucentBasePass, 5, 20
TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler, TranslucentBasePass, 8, 21
TranslucentBasePass_Shared_Reflection_PreIntegratedGF, TranslucentBasePass, 5, 22
TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler, TranslucentBasePass, 8, 23
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture, TranslucentBasePass, 5, 24
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler, TranslucentBasePass, 8, 25
TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap, TranslucentBasePass, 5, 26
TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler, TranslucentBasePass, 8, 27
TranslucentBasePass_Shared_Fog_IntegratedLightScattering, TranslucentBasePass, 9, 28
TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 29
TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap, TranslucentBasePass, 5, 30
TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler, TranslucentBasePass, 8, 31
TranslucentBasePass_Shared_FogISR_IntegratedLightScattering, TranslucentBasePass, 9, 32
TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 33
TranslucentBasePass_SceneTextures_SceneColorTexture, TranslucentBasePass, 9, 34
TranslucentBasePass_SceneTextures_SceneDepthTexture, TranslucentBasePass, 9, 35
TranslucentBasePass_SceneTextures_ScenePartialDepthTexture, TranslucentBasePass, 9, 36
TranslucentBasePass_SceneTextures_GBufferATexture, TranslucentBasePass, 9, 37
TranslucentBasePass_SceneTextures_GBufferBTexture, TranslucentBasePass, 9, 38
TranslucentBasePass_SceneTextures_GBufferCTexture, TranslucentBasePass, 9, 39
TranslucentBasePass_SceneTextures_GBufferDTexture, TranslucentBasePass, 9, 40
TranslucentBasePass_SceneTextures_GBufferETexture, TranslucentBasePass, 9, 41
TranslucentBasePass_SceneTextures_GBufferFTexture, TranslucentBasePass, 9, 42
TranslucentBasePass_SceneTextures_GBufferVelocityTexture, TranslucentBasePass, 9, 43
TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture, TranslucentBasePass, 9, 44
TranslucentBasePass_SceneTextures_CustomDepthTexture, TranslucentBasePass, 9, 45
TranslucentBasePass_SceneTextures_CustomStencilTexture, TranslucentBasePass, 12, 46
TranslucentBasePass_SceneTextures_PointClampSampler, TranslucentBasePass, 8, 47
TranslucentBasePass_Strata_MaterialTextureArray, TranslucentBasePass, 9, 48
TranslucentBasePass_Strata_TopLayerTexture, TranslucentBasePass, 9, 49
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture, TranslucentBasePass, 9, 50
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler, TranslucentBasePass, 8, 51
TranslucentBasePass_OIT_OutOITSampleCount, TranslucentBasePass, 13, 52
TranslucentBasePass_OIT_OutOITSampleColor, TranslucentBasePass, 13, 53
TranslucentBasePass_OIT_OutOITSampleTrans, TranslucentBasePass, 13, 54
TranslucentBasePass_OIT_OutOITSampleDepth, TranslucentBasePass, 13, 55
TranslucentBasePass_HZBTexture, TranslucentBasePass, 9, 56
TranslucentBasePass_HZBSampler, TranslucentBasePass, 8, 57
TranslucentBasePass_PrevSceneColor, TranslucentBasePass, 12, 58
TranslucentBasePass_PrevSceneColorSampler, TranslucentBasePass, 8, 59
TranslucentBasePass_VolumetricCloudColor, TranslucentBasePass, 9, 60
TranslucentBasePass_VolumetricCloudColorSampler, TranslucentBasePass, 8, 61
TranslucentBasePass_VolumetricCloudDepth, TranslucentBasePass, 9, 62
TranslucentBasePass_VolumetricCloudDepthSampler, TranslucentBasePass, 8, 63
TranslucentBasePass_TranslucencyLightingVolumeAmbientInner, TranslucentBasePass, 9, 64
TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter, TranslucentBasePass, 9, 65
TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner, TranslucentBasePass, 9, 66
TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter, TranslucentBasePass, 9, 67
TranslucentBasePass_RadianceProbeIndirectionTexture, TranslucentBasePass, 9, 68
TranslucentBasePass_RadianceCacheFinalRadianceAtlas, TranslucentBasePass, 9, 69
TranslucentBasePass_RadianceCacheFinalIrradianceAtlas, TranslucentBasePass, 9, 70
TranslucentBasePass_RadianceCacheProbeOcclusionAtlas, TranslucentBasePass, 9, 71
TranslucentBasePass_RadianceCacheDepthAtlas, TranslucentBasePass, 9, 72
TranslucentBasePass_ProbeWorldOffset, TranslucentBasePass, 16, 73
TranslucentBasePass_Radiance, TranslucentBasePass, 9, 74
TranslucentBasePass_Normal, TranslucentBasePass, 9, 75
TranslucentBasePass_SceneDepth, TranslucentBasePass, 9, 76
TranslucentBasePass_TranslucencyGIVolume0, TranslucentBasePass, 9, 77
TranslucentBasePass_TranslucencyGIVolume1, TranslucentBasePass, 9, 78
TranslucentBasePass_TranslucencyGIVolumeHistory0, TranslucentBasePass, 9, 79
TranslucentBasePass_TranslucencyGIVolumeHistory1, TranslucentBasePass, 9, 80
TranslucentBasePass_TranslucencyGIVolumeSampler, TranslucentBasePass, 8, 81
TranslucentBasePass_PreIntegratedGFTexture, TranslucentBasePass, 5, 82
TranslucentBasePass_PreIntegratedGFSampler, TranslucentBasePass, 8, 83
TranslucentBasePass_EyeAdaptationBuffer, TranslucentBasePass, 16, 84
TranslucentBasePass_SceneColorCopyTexture, TranslucentBasePass, 9, 85
TranslucentBasePass_SceneColorCopySampler, TranslucentBasePass, 8, 86
TranslucentBasePass_BlueNoise_ScalarTexture, TranslucentBasePass, 5, 87
TranslucentBasePass_BlueNoise_Vec2Texture, TranslucentBasePass, 5, 88
LightmapResourceCluster_LightMapTexture, LightmapResourceCluster, 5, 0
LightmapResourceCluster_SkyOcclusionTexture, LightmapResourceCluster, 5, 1
LightmapResourceCluster_AOMaterialMaskTexture, LightmapResourceCluster, 5, 2
LightmapResourceCluster_StaticShadowTexture, LightmapResourceCluster, 5, 3
LightmapResourceCluster_VTLightMapTexture, LightmapResourceCluster, 6, 4
LightmapResourceCluster_VTLightMapTexture_1, LightmapResourceCluster, 6, 5
LightmapResourceCluster_VTSkyOcclusionTexture, LightmapResourceCluster, 6, 6
LightmapResourceCluster_VTAOMaterialMaskTexture, LightmapResourceCluster, 6, 7
LightmapResourceCluster_VTStaticShadowTexture, LightmapResourceCluster, 6, 8
LightmapResourceCluster_LightMapSampler, LightmapResourceCluster, 8, 9
LightmapResourceCluster_LightMapSampler_1, LightmapResourceCluster, 8, 10
LightmapResourceCluster_SkyOcclusionSampler, LightmapResourceCluster, 8, 11
LightmapResourceCluster_AOMaterialMaskSampler, LightmapResourceCluster, 8, 12
LightmapResourceCluster_StaticShadowTextureSampler, LightmapResourceCluster, 8, 13
LightmapResourceCluster_LightmapVirtualTexturePageTable0, LightmapResourceCluster, 5, 14
LightmapResourceCluster_LightmapVirtualTexturePageTable1, LightmapResourceCluster, 5, 15
IndirectLightingCache_IndirectLightingCacheTexture0, IndirectLightingCache, 5, 0
IndirectLightingCache_IndirectLightingCacheTexture1, IndirectLightingCache, 5, 1
IndirectLightingCache_IndirectLightingCacheTexture2, IndirectLightingCache, 5, 2
IndirectLightingCache_IndirectLightingCacheTextureSampler0, IndirectLightingCache, 8, 3
IndirectLightingCache_IndirectLightingCacheTextureSampler1, IndirectLightingCache, 8, 4
IndirectLightingCache_IndirectLightingCacheTextureSampler2, IndirectLightingCache, 8, 5
MobileDirectionalLight_DirectionalLightShadowTexture, MobileDirectionalLight, 5, 0
MobileDirectionalLight_DirectionalLightShadowSampler, MobileDirectionalLight, 8, 1
ForwardLightData_DirectionalLightShadowmapAtlas, ForwardLightData, 9, 0
ForwardLightData_ShadowmapSampler, ForwardLightData, 8, 1
ForwardLightData_DirectionalLightStaticShadowmap, ForwardLightData, 5, 2
ForwardLightData_StaticShadowmapSampler, ForwardLightData, 8, 3
ForwardLightData_ForwardLocalLightBuffer, ForwardLightData, 16, 4
ForwardLightData_NumCulledLightsGrid, ForwardLightData, 16, 5
ForwardLightData_CulledLightDataGrid32Bit, ForwardLightData, 16, 6
ForwardLightData_CulledLightDataGrid16Bit, ForwardLightData, 16, 7
ReflectionStruct_SkyLightCubemap, ReflectionStruct, 9, 0
ReflectionStruct_SkyLightCubemapSampler, ReflectionStruct, 8, 1
ReflectionStruct_SkyLightBlendDestinationCubemap, ReflectionStruct, 5, 2
ReflectionStruct_SkyLightBlendDestinationCubemapSampler, ReflectionStruct, 8, 3
ReflectionStruct_ReflectionCubemap, ReflectionStruct, 5, 4
ReflectionStruct_ReflectionCubemapSampler, ReflectionStruct, 8, 5
ReflectionStruct_PreIntegratedGF, ReflectionStruct, 5, 6
ReflectionStruct_PreIntegratedGFSampler, ReflectionStruct, 8, 7
PlanarReflectionStruct_PlanarReflectionTexture, PlanarReflectionStruct, 5, 0
PlanarReflectionStruct_PlanarReflectionSampler, PlanarReflectionStruct, 8, 1
VirtualShadowMap_ProjectionData, VirtualShadowMap, 16, 0
VirtualShadowMap_PageTable, VirtualShadowMap, 16, 1
VirtualShadowMap_PageFlags, VirtualShadowMap, 16, 2
VirtualShadowMap_PageRectBounds, VirtualShadowMap, 16, 3
VirtualShadowMap_PhysicalPagePool, VirtualShadowMap, 9, 4
LocalVFLooseParameters_GPUSkinPassThroughPositionBuffer, LocalVFLooseParameters, 6, 0
LocalVFLooseParameters_GPUSkinPassThroughPreviousPositionBuffer, LocalVFLooseParameters, 6, 1
LocalVF_VertexFetch_TexCoordBuffer, LocalVF, 6, 0
LocalVF_VertexFetch_PositionBuffer, LocalVF, 6, 1
LocalVF_VertexFetch_PreSkinPositionBuffer, LocalVF, 6, 2
LocalVF_VertexFetch_PackedTangentsBuffer, LocalVF, 6, 3
LocalVF_VertexFetch_ColorComponentsBuffer, LocalVF, 6, 4
Material_Wrap_WorldGroupSettings, Material, 8, 0
Material_Clamp_WorldGroupSettings, Material, 8, 1
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=SF_VULKAN_ES31_ANDROID -entry=Main -shaderPlatformName=VULKAN_ES3_1_ANDROID -ps F:/GAME DEV STUFF/UnrealProjects/GalactickClicker/Saved/ShaderDebugInfo/VULKAN_ES3_1_ANDROID/M_Sharpen_daf85f2da093e861/Default/FLocalVertexFactory/TMobileBasePassPSFNoLightMapPolicyHDRLinear64LOCAL_LIGHTS_DISABLED/0/MobileBasePassPixelShader.usf -cflags=8590983168 -hlslccflags=562221 -nocrashreports
#endif /*DIRECT COMPILE*/
